// Code generated by fin-protoc. DO NOT EDIT.
package sample_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// RootPacket represents the packet structure.
type RootPacket struct {
	MsgType    uint16            `json:"MsgType"`
	PayloadLen uint32            `json:"PayloadLen"`
	Payload    codec.BinaryCodec `json:"Payload"`
	Checksum   int32             `json:"Checksum"`
}

// NewRootPacket creates a new instance of RootPacket.
func NewRootPacket() *RootPacket {
	return &RootPacket{}
}

// String returns a string representation of the packet.
func (p *RootPacket) String() string {
	return fmt.Sprintf("RootPacket{MsgType: %v, PayloadLen: %v, Payload: %v, Checksum: %v}", p.MsgType, p.PayloadLen, p.Payload, p.Checksum)
}

// Encode encodes the packet into a byte slice.
func (p *RootPacket) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.MsgType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgType", err)
	}
	if err := codec.PutBasicType(buf, p.PayloadLen); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PayloadLen", err)
	}
	if err := p.Payload.Encode(buf); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.Checksum); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Checksum", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *RootPacket) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.MsgType = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.PayloadLen = val
	}
	switch p.MsgType {
	case 1:
		p.Payload = &BasicPacket{}
	case 2:
		p.Payload = &StringPacket{}
	case 3:
		p.Payload = &NestedPacket{}
	case 4:
		p.Payload = &EmptyPacket{}
	default:
		return fmt.Errorf("unsupported MsgType: %v", p.MsgType)
	}
	if err := p.Payload.Decode(buf); err != nil {
		return err
	}
	if val, err := codec.GetBasicType[int32](buf); err != nil {
		return err
	} else {
		p.Checksum = val
	}
	return nil
}
