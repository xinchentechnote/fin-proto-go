// Code generated by fin-protoc. DO NOT EDIT.
package sample_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// InerPacket represents the packet structure.
type InerPacket struct {
	FieldU32     uint32  `json:"fieldU32"`
	FieldI16List []int16 `json:"fieldI16List"`
}

// NewInerPacket creates a new instance of InerPacket.
func NewInerPacket() *InerPacket {
	return &InerPacket{}
}

// String returns a string representation of the packet.
func (p *InerPacket) String() string {
	return fmt.Sprintf("InerPacket{FieldU32: %v, FieldI16List: %v}", p.FieldU32, p.FieldI16List)
}

// Encode encodes the packet into a byte slice.
func (p *InerPacket) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.FieldU32); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldU32", err)
	}
	if err := codec.PutBasicTypeList[uint16](buf, p.FieldI16List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldI16List", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *InerPacket) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.FieldU32 = val
	}
	if val, err := codec.GetBasicTypeList[uint16, int16](buf); err != nil {
		return err
	} else {
		p.FieldI16List = val
	}
	return nil
}

// NestedPacket represents the packet structure.
type NestedPacket struct {
	SubPacket     SubPacket    `json:"SubPacket"`
	SubPacketList []*SubPacket `json:"SubPacketList"`
	InerPacket    `json:"InerPacket"`
}

// NewNestedPacket creates a new instance of NestedPacket.
func NewNestedPacket() *NestedPacket {
	return &NestedPacket{}
}

// String returns a string representation of the packet.
func (p *NestedPacket) String() string {
	return fmt.Sprintf("NestedPacket{SubPacket: %v, SubPacketList: %v, InerPacket: %v}", p.SubPacket, p.SubPacketList, p.InerPacket)
}

// Encode encodes the packet into a byte slice.
func (p *NestedPacket) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := p.SubPacket.Encode(buf); err != nil {
		return err
	}
	if err := codec.PutObjectList[uint16](buf, p.SubPacketList); err != nil {
		return err
	}
	if err := p.InerPacket.Encode(buf); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *NestedPacket) Decode(buf *bytes.Buffer) error {
	if err := p.SubPacket.Decode(buf); err != nil {
		return err
	}
	if val, err := codec.GetObjectList[uint16](buf, func() *SubPacket { return &SubPacket{} }); err != nil {
		return err
	} else {
		p.SubPacketList = val
	}
	if err := p.InerPacket.Decode(buf); err != nil {
		return err
	}
	return nil
}
