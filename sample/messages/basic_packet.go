// Code generated by fin-protoc. DO NOT EDIT.
package sample_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// BasicPacket represents the packet structure.
type BasicPacket struct {
	FieldI8      int8      `json:"fieldI8"`
	FieldI16     int16     `json:"fieldI16"`
	FieldI32     int32     `json:"fieldI32"`
	FieldI64     int64     `json:"fieldI64"`
	FieldU8      uint8     `json:"fieldU8"`
	FieldU16     uint16    `json:"fieldU16"`
	FieldU32     uint32    `json:"fieldU32"`
	FieldU64     uint64    `json:"fieldU64"`
	FieldF32     float32   `json:"fieldF32"`
	FieldF64     float64   `json:"fieldF64"`
	FieldI8List  []int8    `json:"fieldI8List"`
	FieldI16List []int16   `json:"fieldI16List"`
	FieldI32List []int32   `json:"fieldI32List"`
	FieldI64List []int64   `json:"fieldI64List"`
	FieldU8List  []uint8   `json:"fieldU8List"`
	FieldU16List []uint16  `json:"fieldU16List"`
	FieldU32List []uint32  `json:"fieldU32List"`
	FieldU64List []uint64  `json:"fieldU64List"`
	FieldF32List []float32 `json:"fieldF32List"`
	FieldF64List []float64 `json:"fieldF64List"`
}

// NewBasicPacket creates a new instance of BasicPacket.
func NewBasicPacket() *BasicPacket {
	return &BasicPacket{}
}

// String returns a string representation of the packet.
func (p *BasicPacket) String() string {
	return fmt.Sprintf("BasicPacket{FieldI8: %v, FieldI16: %v, FieldI32: %v, FieldI64: %v, FieldU8: %v, FieldU16: %v, FieldU32: %v, FieldU64: %v, FieldF32: %v, FieldF64: %v, FieldI8List: %v, FieldI16List: %v, FieldI32List: %v, FieldI64List: %v, FieldU8List: %v, FieldU16List: %v, FieldU32List: %v, FieldU64List: %v, FieldF32List: %v, FieldF64List: %v}", p.FieldI8, p.FieldI16, p.FieldI32, p.FieldI64, p.FieldU8, p.FieldU16, p.FieldU32, p.FieldU64, p.FieldF32, p.FieldF64, p.FieldI8List, p.FieldI16List, p.FieldI32List, p.FieldI64List, p.FieldU8List, p.FieldU16List, p.FieldU32List, p.FieldU64List, p.FieldF32List, p.FieldF64List)
}

// Encode encodes the packet into a byte slice.
func (p *BasicPacket) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicTypeLE(buf, p.FieldI8); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldI8", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.FieldI16); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldI16", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.FieldI32); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldI32", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.FieldI64); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldI64", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.FieldU8); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldU8", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.FieldU16); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldU16", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.FieldU32); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldU32", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.FieldU64); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldU64", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.FieldF32); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldF32", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.FieldF64); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldF64", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldI8List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldI8List", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldI16List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldI16List", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldI32List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldI32List", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldI64List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldI64List", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldU8List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldU8List", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldU16List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldU16List", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldU32List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldU32List", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldU64List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldU64List", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldF32List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldF32List", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldF64List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldF64List", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *BasicPacket) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicTypeLE[int8](buf); err != nil {
		return err
	} else {
		p.FieldI8 = val
	}
	if val, err := codec.GetBasicTypeLE[int16](buf); err != nil {
		return err
	} else {
		p.FieldI16 = val
	}
	if val, err := codec.GetBasicTypeLE[int32](buf); err != nil {
		return err
	} else {
		p.FieldI32 = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.FieldI64 = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.FieldU8 = val
	}
	if val, err := codec.GetBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.FieldU16 = val
	}
	if val, err := codec.GetBasicTypeLE[uint32](buf); err != nil {
		return err
	} else {
		p.FieldU32 = val
	}
	if val, err := codec.GetBasicTypeLE[uint64](buf); err != nil {
		return err
	} else {
		p.FieldU64 = val
	}
	if val, err := codec.GetBasicTypeLE[float32](buf); err != nil {
		return err
	} else {
		p.FieldF32 = val
	}
	if val, err := codec.GetBasicTypeLE[float64](buf); err != nil {
		return err
	} else {
		p.FieldF64 = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, int8](buf); err != nil {
		return err
	} else {
		p.FieldI8List = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, int16](buf); err != nil {
		return err
	} else {
		p.FieldI16List = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, int32](buf); err != nil {
		return err
	} else {
		p.FieldI32List = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, int64](buf); err != nil {
		return err
	} else {
		p.FieldI64List = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, uint8](buf); err != nil {
		return err
	} else {
		p.FieldU8List = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, uint16](buf); err != nil {
		return err
	} else {
		p.FieldU16List = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, uint32](buf); err != nil {
		return err
	} else {
		p.FieldU32List = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, uint64](buf); err != nil {
		return err
	} else {
		p.FieldU64List = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, float32](buf); err != nil {
		return err
	} else {
		p.FieldF32List = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, float64](buf); err != nil {
		return err
	} else {
		p.FieldF64List = val
	}
	return nil
}
