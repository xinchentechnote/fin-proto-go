// Code generated by fin-protoc. DO NOT EDIT.
package sample_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// StringPacket represents the packet structure.
type StringPacket struct {
	FieldDynamicString      string   `json:"fieldDynamicString"`
	FieldDynamicString1     string   `json:"fieldDynamicString1"`
	FieldFixedString1       string   `json:"fieldFixedString1"`
	FieldFixedString10      string   `json:"fieldFixedString10"`
	FieldDynamicStringList  []string `json:"fieldDynamicStringList"`
	FieldDynamicString1List []string `json:"fieldDynamicString1List"`
	FieldFixedString1List   []string `json:"fieldFixedString1List"`
	FieldFixedString10List  []string `json:"fieldFixedString10List"`
}

// NewStringPacket creates a new instance of StringPacket.
func NewStringPacket() *StringPacket {
	return &StringPacket{}
}

// String returns a string representation of the packet.
func (p *StringPacket) String() string {
	return fmt.Sprintf("StringPacket{FieldDynamicString: %v, FieldDynamicString1: %v, FieldFixedString1: %v, FieldFixedString10: %v, FieldDynamicStringList: %v, FieldDynamicString1List: %v, FieldFixedString1List: %v, FieldFixedString10List: %v}", p.FieldDynamicString, p.FieldDynamicString1, p.FieldFixedString1, p.FieldFixedString10, p.FieldDynamicStringList, p.FieldDynamicString1List, p.FieldFixedString1List, p.FieldFixedString10List)
}

// Encode encodes the packet into a byte slice.
func (p *StringPacket) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutStringLE[uint16](buf, p.FieldDynamicString); err != nil {
		return err
	}
	if err := codec.PutStringLE[uint16](buf, p.FieldDynamicString1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.FieldFixedString1, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.FieldFixedString10, 10); err != nil {
		return err
	}
	if err := codec.PutStringListLE[uint16, uint16](buf, p.FieldDynamicStringList); err != nil {
		return err
	}
	if err := codec.PutStringListLE[uint16, uint16](buf, p.FieldDynamicString1List); err != nil {
		return err
	}
	if err := codec.PutFixedStringListLE[uint16](buf, p.FieldFixedString1List, 1); err != nil {
		return err
	}
	if err := codec.PutFixedStringListLE[uint16](buf, p.FieldFixedString10List, 10); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *StringPacket) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetStringLE[uint16](buf); err != nil {
		return err
	} else {
		p.FieldDynamicString = val
	}
	if val, err := codec.GetStringLE[uint16](buf); err != nil {
		return err
	} else {
		p.FieldDynamicString1 = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.FieldFixedString1 = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.FieldFixedString10 = val
	}
	if val, err := codec.GetStringListLE[uint16, uint16](buf); err != nil {
		return err
	} else {
		p.FieldDynamicStringList = val
	}
	if val, err := codec.GetStringListLE[uint16, uint16](buf); err != nil {
		return err
	} else {
		p.FieldDynamicString1List = val
	}
	if val, err := codec.GetFixedStringListLE[uint16](buf, 1); err != nil {
		return err
	} else {
		p.FieldFixedString1List = val
	}
	if val, err := codec.GetFixedStringListLE[uint16](buf, 10); err != nil {
		return err
	} else {
		p.FieldFixedString10List = val
	}
	return nil
}
