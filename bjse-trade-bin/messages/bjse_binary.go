// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// BjseBinary represents the packet structure.
type BjseBinary struct {
	MsgType    uint32            `json:"MsgType"`
	BodyLength uint32            `json:"BodyLength"`
	Body       codec.BinaryCodec `json:"Body"`
	Checksum   uint32            `json:"Checksum"`
}

// NewBjseBinary creates a new instance of BjseBinary.
func NewBjseBinary() *BjseBinary {
	return &BjseBinary{}
}

// String returns a string representation of the packet.
func (p *BjseBinary) String() string {
	return fmt.Sprintf("BjseBinary{MsgType: %v, BodyLength: %v, Body: %v, Checksum: %v}", p.MsgType, p.BodyLength, p.Body, p.Checksum)
}

// Encode encodes the packet into a byte slice.
func (p *BjseBinary) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicTypeLE(buf, p.MsgType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgType", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.BodyLength); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BodyLength", err)
	}
	if err := p.Body.Encode(buf); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.Checksum); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Checksum", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *BjseBinary) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicTypeLE[uint32](buf); err != nil {
		return err
	} else {
		p.MsgType = val
	}
	if val, err := codec.GetBasicTypeLE[uint32](buf); err != nil {
		return err
	} else {
		p.BodyLength = val
	}
	switch p.MsgType {
	case 1:
		p.Body = &Logon{}
	case 2:
		p.Body = &Logout{}
	case 3:
		p.Body = &Heartbeat{}
	case 101000:
		p.Body = &NewOrder{}
	case 102000:
		p.Body = &OrderCancelRequest{}
	case 201000:
		p.Body = &CancelReject{}
	case 202010:
		p.Body = &ExecutionConfirm{}
	case 203010:
		p.Body = &ExecutionReport{}
	case 5:
		p.Body = &ReportSynchronization{}
	case 6:
		p.Body = &PlatformStateInfo{}
	case 7:
		p.Body = &ReportFinished{}
	default:
		return fmt.Errorf("unsupported MsgType: %v", p.MsgType)
	}
	if err := p.Body.Decode(buf); err != nil {
		return err
	}
	if val, err := codec.GetBasicTypeLE[uint32](buf); err != nil {
		return err
	} else {
		p.Checksum = val
	}
	return nil
}
