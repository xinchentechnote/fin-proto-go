// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
	RegistryBjseBinaryMsgTypeFactory(1, func() codec.BinaryCodec { return &Logon{} })
	RegistryBjseBinaryMsgTypeFactory(2, func() codec.BinaryCodec { return &Logout{} })
	RegistryBjseBinaryMsgTypeFactory(3, func() codec.BinaryCodec { return &Heartbeat{} })
	RegistryBjseBinaryMsgTypeFactory(101000, func() codec.BinaryCodec { return &NewOrder{} })
	RegistryBjseBinaryMsgTypeFactory(102000, func() codec.BinaryCodec { return &OrderCancelRequest{} })
	RegistryBjseBinaryMsgTypeFactory(201000, func() codec.BinaryCodec { return &CancelReject{} })
	RegistryBjseBinaryMsgTypeFactory(202010, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistryBjseBinaryMsgTypeFactory(203010, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistryBjseBinaryMsgTypeFactory(5, func() codec.BinaryCodec { return &ReportSynchronization{} })
	RegistryBjseBinaryMsgTypeFactory(6, func() codec.BinaryCodec { return &PlatformStateInfo{} })
	RegistryBjseBinaryMsgTypeFactory(7, func() codec.BinaryCodec { return &ReportFinished{} })
}

var bjseBinaryMsgTypeFactoryCache = map[uint32]func() codec.BinaryCodec{}

func RegistryBjseBinaryMsgTypeFactory(msgType uint32, factory func() codec.BinaryCodec) {
	bjseBinaryMsgTypeFactoryCache[msgType] = factory
}

func NewBjseBinaryMessageByMsgType(key uint32) (codec.BinaryCodec, error) {
	if factory, ok := bjseBinaryMsgTypeFactoryCache[key]; ok {
		return factory(), nil
	}
	return nil, fmt.Errorf("unknown message type")
}

// BjseBinary represents the packet structure.
type BjseBinary struct {
	MsgType    uint32            `json:"MsgType"`
	BodyLength uint32            `json:"BodyLength"`
	Body       codec.BinaryCodec `json:"Body"`
	Checksum   uint32            `json:"Checksum"`
}

// NewBjseBinary creates a new instance of BjseBinary.
func NewBjseBinary() *BjseBinary {
	return &BjseBinary{}
}

// String returns a string representation of the packet.
func (p *BjseBinary) String() string {
	return fmt.Sprintf("BjseBinary{MsgType: %v, BodyLength: %v, Body: %v, Checksum: %v}", p.MsgType, p.BodyLength, p.Body, p.Checksum)
}

// Encode encodes the packet into a byte slice.
func (p *BjseBinary) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteBasicTypeLE(buf, p.MsgType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgType", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.BodyLength); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BodyLength", err)
	}
	if p.Body == nil {
		if val, err := NewBjseBinaryMessageByMsgType(p.MsgType); err != nil {
			return err
		} else {
			p.Body = val
		}
	}
	if err := p.Body.Encode(buf); err != nil {
		return err
	}
	if err := codec.WriteBasicTypeLE(buf, p.Checksum); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Checksum", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *BjseBinary) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadBasicTypeLE[uint32](buf); err != nil {
		return err
	} else {
		p.MsgType = val
	}
	if val, err := codec.ReadBasicTypeLE[uint32](buf); err != nil {
		return err
	} else {
		p.BodyLength = val
	}
	if val, err := NewBjseBinaryMessageByMsgType(p.MsgType); err != nil {
		return err
	} else {
		p.Body = val
	}
	if err := p.Body.Decode(buf); err != nil {
		return err
	}
	if val, err := codec.ReadBasicTypeLE[uint32](buf); err != nil {
		return err
	} else {
		p.Checksum = val
	}
	return nil
}
