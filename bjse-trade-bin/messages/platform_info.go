// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

func init() {
}

// NoPartitions represents the packet structure.
type NoPartitions struct {
	PartitionNo   int32  `json:"PartitionNo"`
	PartitionName string `json:"PartitionName"`
}

// NewNoPartitions creates a new instance of NoPartitions.
func NewNoPartitions() *NoPartitions {
	return &NoPartitions{}
}

// String returns a string representation of the packet.
func (p *NoPartitions) String() string {
	return fmt.Sprintf("NoPartitions{PartitionNo: %v, PartitionName: %v}", p.PartitionNo, p.PartitionName)
}

// Encode encodes the packet into a byte slice.
func (p *NoPartitions) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteBasicTypeLE(buf, p.PartitionNo); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PartitionNo", err)
	}
	if err := codec.WriteFixedString(buf, p.PartitionName, 20); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *NoPartitions) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadBasicTypeLE[int32](buf); err != nil {
		return err
	} else {
		p.PartitionNo = val
	}
	if val, err := codec.ReadFixedString(buf, 20); err != nil {
		return err
	} else {
		p.PartitionName = val
	}
	return nil
}

// PlatformInfo represents the packet structure.
type PlatformInfo struct {
	PlatformId   uint16          `json:"PlatformID"`
	NoPartitions []*NoPartitions `json:"NoPartitions"`
}

// NewPlatformInfo creates a new instance of PlatformInfo.
func NewPlatformInfo() *PlatformInfo {
	return &PlatformInfo{}
}

// String returns a string representation of the packet.
func (p *PlatformInfo) String() string {
	return fmt.Sprintf("PlatformInfo{PlatformId: %v, NoPartitions: %v}", p.PlatformId, p.NoPartitions)
}

// Encode encodes the packet into a byte slice.
func (p *PlatformInfo) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteBasicTypeLE(buf, p.PlatformId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PlatformID", err)
	}
	if err := codec.WriteObjectListLE[uint16](buf, p.NoPartitions); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *PlatformInfo) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.PlatformId = val
	}
	if val, err := codec.ReadObjectListLE[uint16](buf, func() *NoPartitions { return &NoPartitions{} }); err != nil {
		return err
	} else {
		p.NoPartitions = val
	}
	return nil
}
