// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// ConfirmExtend050 represents the packet structure.
type ConfirmExtend050 struct {
	ExpirationDays uint16 `json:"ExpirationDays"`
	ExpirationType uint8  `json:"ExpirationType"`
	ShareProperty  string `json:"ShareProperty"`
}

// NewConfirmExtend050 creates a new instance of ConfirmExtend050.
func NewConfirmExtend050() *ConfirmExtend050 {
	return &ConfirmExtend050{}
}

// String returns a string representation of the packet.
func (p *ConfirmExtend050) String() string {
	return fmt.Sprintf("ConfirmExtend050{ExpirationDays: %v, ExpirationType: %v, ShareProperty: %v}", p.ExpirationDays, p.ExpirationType, p.ShareProperty)
}

// Encode encodes the packet into a byte slice.
func (p *ConfirmExtend050) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicTypeLE(buf, p.ExpirationDays); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ExpirationDays", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.ExpirationType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ExpirationType", err)
	}
	if err := codec.PutFixedString(buf, p.ShareProperty, 2); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ConfirmExtend050) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.ExpirationDays = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.ExpirationType = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.ShareProperty = val
	}
	return nil
}
