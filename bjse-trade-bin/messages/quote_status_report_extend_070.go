// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// Quote1 represents the packet structure.
type Quote1 struct {
	QuoteId    string `json:"QuoteID"`
	QuotePrice int64  `json:"QuotePrice"`
	QuoteQty   int64  `json:"QuoteQty"`
}

// NewQuote1 creates a new instance of Quote1.
func NewQuote1() *Quote1 {
	return &Quote1{}
}

// String returns a string representation of the packet.
func (p *Quote1) String() string {
	return fmt.Sprintf("Quote1{QuoteId: %v, QuotePrice: %v, QuoteQty: %v}", p.QuoteId, p.QuotePrice, p.QuoteQty)
}

// Encode encodes the packet into a byte slice.
func (p *Quote1) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.QuoteId, 10); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.QuotePrice); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuotePrice", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.QuoteQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuoteQty", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Quote1) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteId = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.QuotePrice = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.QuoteQty = val
	}
	return nil
}

// QuoteStatusReportExtend070 represents the packet structure.
type QuoteStatusReportExtend070 struct {
	BranchId          string    `json:"BranchID"`
	OrderId           string    `json:"OrderID"`
	ExecId            string    `json:"ExecID"`
	QuoteRespId       string    `json:"QuoteRespID"`
	PrivateQuote      uint8     `json:"PrivateQuote"`
	Side              string    `json:"Side"`
	PriceType         uint8     `json:"PriceType"`
	ValidUntilTime    int64     `json:"ValidUntilTime"`
	CashMargin        string    `json:"CashMargin"`
	CounterPartyPbuid string    `json:"CounterPartyPBUID"`
	Memo              string    `json:"Memo"`
	Quote1            []*Quote1 `json:"Quote1"`
}

// NewQuoteStatusReportExtend070 creates a new instance of QuoteStatusReportExtend070.
func NewQuoteStatusReportExtend070() *QuoteStatusReportExtend070 {
	return &QuoteStatusReportExtend070{}
}

// String returns a string representation of the packet.
func (p *QuoteStatusReportExtend070) String() string {
	return fmt.Sprintf("QuoteStatusReportExtend070{BranchId: %v, OrderId: %v, ExecId: %v, QuoteRespId: %v, PrivateQuote: %v, Side: %v, PriceType: %v, ValidUntilTime: %v, CashMargin: %v, CounterPartyPbuid: %v, Memo: %v, Quote1: %v}", p.BranchId, p.OrderId, p.ExecId, p.QuoteRespId, p.PrivateQuote, p.Side, p.PriceType, p.ValidUntilTime, p.CashMargin, p.CounterPartyPbuid, p.Memo, p.Quote1)
}

// Encode encodes the packet into a byte slice.
func (p *QuoteStatusReportExtend070) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.BranchId, 2); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrderId, 16); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ExecId, 16); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.QuoteRespId, 10); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.PrivateQuote); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PrivateQuote", err)
	}
	if err := codec.PutFixedString(buf, p.Side, 1); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.PriceType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PriceType", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.ValidUntilTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ValidUntilTime", err)
	}
	if err := codec.PutFixedString(buf, p.CashMargin, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CounterPartyPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.Memo, 120); err != nil {
		return err
	}
	if err := codec.PutObjectListLE[uint16](buf, p.Quote1); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *QuoteStatusReportExtend070) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.BranchId = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.OrderId = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.ExecId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteRespId = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.PrivateQuote = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.Side = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.PriceType = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.ValidUntilTime = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.CashMargin = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.CounterPartyPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 120); err != nil {
		return err
	} else {
		p.Memo = val
	}
	if val, err := codec.GetObjectListLE[uint16](buf, func() *Quote1 { return &Quote1{} }); err != nil {
		return err
	} else {
		p.Quote1 = val
	}
	return nil
}
