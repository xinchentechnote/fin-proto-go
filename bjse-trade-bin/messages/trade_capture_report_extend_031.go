// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// TradeCaptureReportExtend031 represents the packet structure.
type TradeCaptureReportExtend031 struct {
	MemberId               string `json:"MemberID"`
	TraderCode             string `json:"TraderCode"`
	CounterPartyMemberId   string `json:"CounterPartyMemberID"`
	CounterPartyTraderCode string `json:"CounterPartyTraderCode"`
	SettlType              string `json:"SettlType"`
	SettlPeriod            string `json:"SettlPeriod"`
	CashMargin             string `json:"CashMargin"`
	Memo                   string `json:"Memo"`
}

// NewTradeCaptureReportExtend031 creates a new instance of TradeCaptureReportExtend031.
func NewTradeCaptureReportExtend031() *TradeCaptureReportExtend031 {
	return &TradeCaptureReportExtend031{}
}

// String returns a string representation of the packet.
func (p *TradeCaptureReportExtend031) String() string {
	return fmt.Sprintf("TradeCaptureReportExtend031{MemberId: %v, TraderCode: %v, CounterPartyMemberId: %v, CounterPartyTraderCode: %v, SettlType: %v, SettlPeriod: %v, CashMargin: %v, Memo: %v}", p.MemberId, p.TraderCode, p.CounterPartyMemberId, p.CounterPartyTraderCode, p.SettlType, p.SettlPeriod, p.CashMargin, p.Memo)
}

// Encode encodes the packet into a byte slice.
func (p *TradeCaptureReportExtend031) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.MemberId, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.TraderCode, 5); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CounterPartyMemberId, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CounterPartyTraderCode, 5); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SettlType, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SettlPeriod, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CashMargin, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.Memo, 120); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *TradeCaptureReportExtend031) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.MemberId = val
	}
	if val, err := codec.GetFixedString(buf, 5); err != nil {
		return err
	} else {
		p.TraderCode = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.CounterPartyMemberId = val
	}
	if val, err := codec.GetFixedString(buf, 5); err != nil {
		return err
	} else {
		p.CounterPartyTraderCode = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.SettlType = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.SettlPeriod = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.CashMargin = val
	}
	if val, err := codec.GetFixedString(buf, 120); err != nil {
		return err
	} else {
		p.Memo = val
	}
	return nil
}
