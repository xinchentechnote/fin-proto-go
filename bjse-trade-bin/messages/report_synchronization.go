// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// ReportPartitionSync represents the packet structure.
type ReportPartitionSync struct {
	PartitionNo int32 `json:"PartitionNo"`
	ReportIndex int64 `json:"ReportIndex"`
}

// NewReportPartitionSync creates a new instance of ReportPartitionSync.
func NewReportPartitionSync() *ReportPartitionSync {
	return &ReportPartitionSync{}
}

// String returns a string representation of the packet.
func (p *ReportPartitionSync) String() string {
	return fmt.Sprintf("ReportPartitionSync{PartitionNo: %v, ReportIndex: %v}", p.PartitionNo, p.ReportIndex)
}

// Encode encodes the packet into a byte slice.
func (p *ReportPartitionSync) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicTypeLE(buf, p.PartitionNo); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PartitionNo", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.ReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ReportIndex", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ReportPartitionSync) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicTypeLE[int32](buf); err != nil {
		return err
	} else {
		p.PartitionNo = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.ReportIndex = val
	}
	return nil
}

// ReportSynchronization represents the packet structure.
type ReportSynchronization struct {
	ReportPartitionSync []*ReportPartitionSync `json:"ReportPartitionSync"`
}

// NewReportSynchronization creates a new instance of ReportSynchronization.
func NewReportSynchronization() *ReportSynchronization {
	return &ReportSynchronization{}
}

// String returns a string representation of the packet.
func (p *ReportSynchronization) String() string {
	return fmt.Sprintf("ReportSynchronization{ReportPartitionSync: %v}", p.ReportPartitionSync)
}

// Encode encodes the packet into a byte slice.
func (p *ReportSynchronization) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutObjectListLE[uint16](buf, p.ReportPartitionSync); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ReportSynchronization) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetObjectListLE[uint16](buf, func() *ReportPartitionSync { return &ReportPartitionSync{} }); err != nil {
		return err
	} else {
		p.ReportPartitionSync = val
	}
	return nil
}
