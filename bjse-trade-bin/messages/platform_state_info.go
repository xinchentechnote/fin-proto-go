// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// PlatformStateInfo represents the packet structure.
type PlatformStateInfo struct {
	PlatformId    uint16 `json:"PlatformID"`
	PlatformState uint16 `json:"PlatformState"`
}

// NewPlatformStateInfo creates a new instance of PlatformStateInfo.
func NewPlatformStateInfo() *PlatformStateInfo {
	return &PlatformStateInfo{}
}

// String returns a string representation of the packet.
func (p *PlatformStateInfo) String() string {
	return fmt.Sprintf("PlatformStateInfo{PlatformId: %v, PlatformState: %v}", p.PlatformId, p.PlatformState)
}

// Encode encodes the packet into a byte slice.
func (p *PlatformStateInfo) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteBasicTypeLE(buf, p.PlatformId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PlatformID", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.PlatformState); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PlatformState", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *PlatformStateInfo) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.PlatformId = val
	}
	if val, err := codec.ReadBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.PlatformState = val
	}
	return nil
}
