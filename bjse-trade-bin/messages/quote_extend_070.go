// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// QuoteExtend070 represents the packet structure.
type QuoteExtend070 struct {
	BranchId          string `json:"BranchID"`
	QuoteId           string `json:"QuoteID"`
	QuoteRespId       string `json:"QuoteRespID"`
	PrivateQuote      uint8  `json:"PrivateQuote"`
	ValidUntilTime    int64  `json:"ValidUntilTime"`
	PriceType         uint8  `json:"PriceType"`
	CashMargin        string `json:"CashMargin"`
	CounterPartyPbuid string `json:"CounterPartyPBUID"`
	Memo              string `json:"Memo"`
}

// NewQuoteExtend070 creates a new instance of QuoteExtend070.
func NewQuoteExtend070() *QuoteExtend070 {
	return &QuoteExtend070{}
}

// String returns a string representation of the packet.
func (p *QuoteExtend070) String() string {
	return fmt.Sprintf("QuoteExtend070{BranchId: %v, QuoteId: %v, QuoteRespId: %v, PrivateQuote: %v, ValidUntilTime: %v, PriceType: %v, CashMargin: %v, CounterPartyPbuid: %v, Memo: %v}", p.BranchId, p.QuoteId, p.QuoteRespId, p.PrivateQuote, p.ValidUntilTime, p.PriceType, p.CashMargin, p.CounterPartyPbuid, p.Memo)
}

// Encode encodes the packet into a byte slice.
func (p *QuoteExtend070) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.BranchId, 2); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.QuoteId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.QuoteRespId, 10); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.PrivateQuote); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PrivateQuote", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.ValidUntilTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ValidUntilTime", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.PriceType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PriceType", err)
	}
	if err := codec.PutFixedString(buf, p.CashMargin, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CounterPartyPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.Memo, 120); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *QuoteExtend070) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.BranchId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteRespId = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.PrivateQuote = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.ValidUntilTime = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.PriceType = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.CashMargin = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.CounterPartyPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 120); err != nil {
		return err
	} else {
		p.Memo = val
	}
	return nil
}
