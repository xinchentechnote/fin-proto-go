// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// TradingSessionStatus represents the packet structure.
type TradingSessionStatus struct {
	MarketId            string `json:"MarketID"`
	MarketSegmentId     string `json:"MarketSegmentID"`
	TradingSessionId    string `json:"TradingSessionID"`
	TradingSessionSubId string `json:"TradingSessionSubID"`
	TradSesStatus       uint8  `json:"TradSesStatus"`
	TradSesStartTime    int64  `json:"TradSesStartTime"`
}

// NewTradingSessionStatus creates a new instance of TradingSessionStatus.
func NewTradingSessionStatus() *TradingSessionStatus {
	return &TradingSessionStatus{}
}

// String returns a string representation of the packet.
func (p *TradingSessionStatus) String() string {
	return fmt.Sprintf("TradingSessionStatus{MarketId: %v, MarketSegmentId: %v, TradingSessionId: %v, TradingSessionSubId: %v, TradSesStatus: %v, TradSesStartTime: %v}", p.MarketId, p.MarketSegmentId, p.TradingSessionId, p.TradingSessionSubId, p.TradSesStatus, p.TradSesStartTime)
}

// Encode encodes the packet into a byte slice.
func (p *TradingSessionStatus) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.MarketId, 3); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.MarketSegmentId, 3); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.TradingSessionId, 3); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.TradingSessionSubId, 3); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.TradSesStatus); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TradSesStatus", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.TradSesStartTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TradSesStartTime", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *TradingSessionStatus) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 3); err != nil {
		return err
	} else {
		p.MarketId = val
	}
	if val, err := codec.GetFixedString(buf, 3); err != nil {
		return err
	} else {
		p.MarketSegmentId = val
	}
	if val, err := codec.GetFixedString(buf, 3); err != nil {
		return err
	} else {
		p.TradingSessionId = val
	}
	if val, err := codec.GetFixedString(buf, 3); err != nil {
		return err
	} else {
		p.TradingSessionSubId = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.TradSesStatus = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.TradSesStartTime = val
	}
	return nil
}
