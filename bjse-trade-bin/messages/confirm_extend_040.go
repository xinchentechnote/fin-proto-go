// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// ConfirmExtend040 represents the packet structure.
type ConfirmExtend040 struct {
	StopPx         int64  `json:"StopPx"`
	MinQty         int64  `json:"MinQty"`
	MaxPriceLevels uint16 `json:"MaxPriceLevels"`
	TimeInForce    string `json:"TimeInForce"`
	CashMargin     string `json:"CashMargin"`
}

// NewConfirmExtend040 creates a new instance of ConfirmExtend040.
func NewConfirmExtend040() *ConfirmExtend040 {
	return &ConfirmExtend040{}
}

// String returns a string representation of the packet.
func (p *ConfirmExtend040) String() string {
	return fmt.Sprintf("ConfirmExtend040{StopPx: %v, MinQty: %v, MaxPriceLevels: %v, TimeInForce: %v, CashMargin: %v}", p.StopPx, p.MinQty, p.MaxPriceLevels, p.TimeInForce, p.CashMargin)
}

// Encode encodes the packet into a byte slice.
func (p *ConfirmExtend040) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteBasicTypeLE(buf, p.StopPx); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "StopPx", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.MinQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MinQty", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.MaxPriceLevels); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MaxPriceLevels", err)
	}
	if err := codec.WriteFixedString(buf, p.TimeInForce, 1); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.CashMargin, 1); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ConfirmExtend040) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.StopPx = val
	}
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.MinQty = val
	}
	if val, err := codec.ReadBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.MaxPriceLevels = val
	}
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.TimeInForce = val
	}
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.CashMargin = val
	}
	return nil
}
