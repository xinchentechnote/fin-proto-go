// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// AllegeQuoteResponse represents the packet structure.
type AllegeQuoteResponse struct {
	PartitionNo      int32  `json:"PartitionNo"`
	ReportIndex      int64  `json:"ReportIndex"`
	ApplId           string `json:"ApplID"`
	ReportingPbuid   string `json:"ReportingPBUID"`
	SubmittingPbuid  string `json:"SubmittingPBUID"`
	SecurityId       string `json:"SecurityID"`
	SecurityIdsource string `json:"SecurityIDSource"`
	OwnerType        uint16 `json:"OwnerType"`
	ClearingFirm     string `json:"ClearingFirm"`
	TransactTime     int64  `json:"TransactTime"`
	UserInfo         string `json:"UserInfo"`
	OrderId          string `json:"OrderID"`
	ExecId           string `json:"ExecID"`
	ClOrdId          string `json:"ClOrdID"`
	AccountId        string `json:"AccountID"`
	QuoteId          string `json:"QuoteID"`
	QuoteRespId      string `json:"QuoteRespID"`
	QuoteRespType    uint8  `json:"QuoteRespType"`
	PrivateQuote     uint8  `json:"PrivateQuote"`
	OrderQty         int64  `json:"OrderQty"`
	Price            int64  `json:"Price"`
	ValidUntilTime   int64  `json:"ValidUntilTime"`
	QuoteType        uint8  `json:"QuoteType"`
	PriceType        uint8  `json:"PriceType"`
}

// NewAllegeQuoteResponse creates a new instance of AllegeQuoteResponse.
func NewAllegeQuoteResponse() *AllegeQuoteResponse {
	return &AllegeQuoteResponse{}
}

// String returns a string representation of the packet.
func (p *AllegeQuoteResponse) String() string {
	return fmt.Sprintf("AllegeQuoteResponse{PartitionNo: %v, ReportIndex: %v, ApplId: %v, ReportingPbuid: %v, SubmittingPbuid: %v, SecurityId: %v, SecurityIdsource: %v, OwnerType: %v, ClearingFirm: %v, TransactTime: %v, UserInfo: %v, OrderId: %v, ExecId: %v, ClOrdId: %v, AccountId: %v, QuoteId: %v, QuoteRespId: %v, QuoteRespType: %v, PrivateQuote: %v, OrderQty: %v, Price: %v, ValidUntilTime: %v, QuoteType: %v, PriceType: %v}", p.PartitionNo, p.ReportIndex, p.ApplId, p.ReportingPbuid, p.SubmittingPbuid, p.SecurityId, p.SecurityIdsource, p.OwnerType, p.ClearingFirm, p.TransactTime, p.UserInfo, p.OrderId, p.ExecId, p.ClOrdId, p.AccountId, p.QuoteId, p.QuoteRespId, p.QuoteRespType, p.PrivateQuote, p.OrderQty, p.Price, p.ValidUntilTime, p.QuoteType, p.PriceType)
}

// Encode encodes the packet into a byte slice.
func (p *AllegeQuoteResponse) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteBasicTypeLE(buf, p.PartitionNo); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PartitionNo", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.ReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ReportIndex", err)
	}
	if err := codec.WriteFixedString(buf, p.ApplId, 3); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.ReportingPbuid, 6); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.SubmittingPbuid, 6); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.SecurityId, 8); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.SecurityIdsource, 4); err != nil {
		return err
	}
	if err := codec.WriteBasicTypeLE(buf, p.OwnerType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OwnerType", err)
	}
	if err := codec.WriteFixedString(buf, p.ClearingFirm, 2); err != nil {
		return err
	}
	if err := codec.WriteBasicTypeLE(buf, p.TransactTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TransactTime", err)
	}
	if err := codec.WriteFixedString(buf, p.UserInfo, 32); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.OrderId, 16); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.ExecId, 16); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.ClOrdId, 10); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.AccountId, 10); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.QuoteId, 10); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.QuoteRespId, 10); err != nil {
		return err
	}
	if err := codec.WriteBasicTypeLE(buf, p.QuoteRespType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuoteRespType", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.PrivateQuote); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PrivateQuote", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.OrderQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrderQty", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.Price); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Price", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.ValidUntilTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ValidUntilTime", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.QuoteType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuoteType", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.PriceType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PriceType", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *AllegeQuoteResponse) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadBasicTypeLE[int32](buf); err != nil {
		return err
	} else {
		p.PartitionNo = val
	}
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.ReportIndex = val
	}
	if val, err := codec.ReadFixedString(buf, 3); err != nil {
		return err
	} else {
		p.ApplId = val
	}
	if val, err := codec.ReadFixedString(buf, 6); err != nil {
		return err
	} else {
		p.ReportingPbuid = val
	}
	if val, err := codec.ReadFixedString(buf, 6); err != nil {
		return err
	} else {
		p.SubmittingPbuid = val
	}
	if val, err := codec.ReadFixedString(buf, 8); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.ReadFixedString(buf, 4); err != nil {
		return err
	} else {
		p.SecurityIdsource = val
	}
	if val, err := codec.ReadBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.OwnerType = val
	}
	if val, err := codec.ReadFixedString(buf, 2); err != nil {
		return err
	} else {
		p.ClearingFirm = val
	}
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.TransactTime = val
	}
	if val, err := codec.ReadFixedString(buf, 32); err != nil {
		return err
	} else {
		p.UserInfo = val
	}
	if val, err := codec.ReadFixedString(buf, 16); err != nil {
		return err
	} else {
		p.OrderId = val
	}
	if val, err := codec.ReadFixedString(buf, 16); err != nil {
		return err
	} else {
		p.ExecId = val
	}
	if val, err := codec.ReadFixedString(buf, 10); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.ReadFixedString(buf, 10); err != nil {
		return err
	} else {
		p.AccountId = val
	}
	if val, err := codec.ReadFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteId = val
	}
	if val, err := codec.ReadFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteRespId = val
	}
	if val, err := codec.ReadBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.QuoteRespType = val
	}
	if val, err := codec.ReadBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.PrivateQuote = val
	}
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.OrderQty = val
	}
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.Price = val
	}
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.ValidUntilTime = val
	}
	if val, err := codec.ReadBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.QuoteType = val
	}
	if val, err := codec.ReadBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.PriceType = val
	}
	return nil
}
