// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin_test

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	msg "github.com/xinchentechnote/fin-proto-go/bjse-trade-bin/messages"
)

func TestTradeCaptureReportAckCodec(t *testing.T) {

	applExtend := &msg.TradeCaptureReportAckExtend031{
		MemberId:               "xxxxxx",
		TraderCode:             "xxxxx",
		CounterPartyMemberId:   "xxxxxx",
		CounterPartyTraderCode: "xxxxx",
		SettlType:              "x",
		SettlPeriod:            "x",
		CashMargin:             "x",
		Memo:                   "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
	}
	original := &msg.TradeCaptureReportAck{
		PartitionNo:             4,
		ReportIndex:             8,
		ReportingPbuid:          "xxxxxx",
		SubmittingPbuid:         "xxxxxx",
		SecurityId:              "xxxxxxxx",
		SecurityIdsource:        "xxxx",
		OwnerType:               2,
		ClearingFirm:            "xx",
		TransactTime:            8,
		UserInfo:                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
		TradeId:                 "xxxxxxxxxxxxxxxx",
		TradeReportId:           "xxxxxxxxxx",
		TradeReportType:         1,
		TradeReportTransType:    1,
		TradeHandlingInstr:      "x",
		TradeReportRefId:        "xxxxxxxxxx",
		TrdAckStatus:            1,
		TrdRptStatus:            1,
		TradeReportRejectReason: 2,
		LastPx:                  8,
		LastQty:                 8,
		TrdType:                 2,
		TrdSubType:              2,
		ConfirmId:               4,
		ExecId:                  "xxxxxxxxxxxxxxxx",
		Side:                    "x",
		Pbuid:                   "xxxxxx",
		AccountId:               "xxxxxxxxxx",
		BranchId:                "xx",
		CounterPartyPbuid:       "xxxxxx",
		CounterPartyAccountId:   "xxxxxxxxxx",
		CounterPartyBranchId:    "xx",
		ApplId:                  "031",
		ApplExtend:              applExtend,
	}
	var buf bytes.Buffer
	assert.NoError(t, original.Encode(&buf))
	var decoded msg.TradeCaptureReportAck
	assert.NoError(t, decoded.Decode(&buf))
	assert.Equal(t, original, &decoded)
}
