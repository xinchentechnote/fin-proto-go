// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
	RegistryQuoteResponseApplIdFactory("070", func() codec.BinaryCodec { return &QuoteResponseExtend070{} })
}

var quoteResponseApplIdFactoryCache = map[string]func() codec.BinaryCodec{}

func RegistryQuoteResponseApplIdFactory(applId string, factory func() codec.BinaryCodec) {
	quoteResponseApplIdFactoryCache[applId] = factory
}

func NewQuoteResponseMessageByApplId(key string) (codec.BinaryCodec, error) {
	if factory, ok := quoteResponseApplIdFactoryCache[key]; ok {
		return factory(), nil
	}
	return nil, fmt.Errorf("unknown message type")
}

func init() {
}

// Quote2 represents the packet structure.
type Quote2 struct {
	QuoteId    string `json:"QuoteID"`
	QuotePrice int64  `json:"QuotePrice"`
	QuoteQty   int64  `json:"QuoteQty"`
}

// NewQuote2 creates a new instance of Quote2.
func NewQuote2() *Quote2 {
	return &Quote2{}
}

// String returns a string representation of the packet.
func (p *Quote2) String() string {
	return fmt.Sprintf("Quote2{QuoteId: %v, QuotePrice: %v, QuoteQty: %v}", p.QuoteId, p.QuotePrice, p.QuoteQty)
}

// Encode encodes the packet into a byte slice.
func (p *Quote2) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteFixedString(buf, p.QuoteId, 10); err != nil {
		return err
	}
	if err := codec.WriteBasicTypeLE(buf, p.QuotePrice); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuotePrice", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.QuoteQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuoteQty", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Quote2) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteId = val
	}
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.QuotePrice = val
	}
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.QuoteQty = val
	}
	return nil
}

// QuoteResponse represents the packet structure.
type QuoteResponse struct {
	ApplId           string            `json:"ApplID"`
	ReportingPbuid   string            `json:"ReportingPBUID"`
	SubmittingPbuid  string            `json:"SubmittingPBUID"`
	SecurityId       string            `json:"SecurityID"`
	SecurityIdsource string            `json:"SecurityIDSource"`
	OwnerType        uint16            `json:"OwnerType"`
	ClearingFirm     string            `json:"ClearingFirm"`
	TransactTime     int64             `json:"TransactTime"`
	UserInfo         string            `json:"UserInfo"`
	ClOrdId          string            `json:"ClOrdID"`
	AccountId        string            `json:"AccountID"`
	BranchId         string            `json:"BranchID"`
	QuoteRespId      string            `json:"QuoteRespID"`
	QuoteRespType    uint8             `json:"QuoteRespType"`
	Side             string            `json:"Side"`
	ValidUntilTime   int64             `json:"ValidUntilTime"`
	QuoteType        uint8             `json:"QuoteType"`
	PriceType        uint8             `json:"PriceType"`
	Quote2           []*Quote2         `json:"Quote2"`
	ApplExtend       codec.BinaryCodec `json:"ApplExtend"`
}

// NewQuoteResponse creates a new instance of QuoteResponse.
func NewQuoteResponse() *QuoteResponse {
	return &QuoteResponse{}
}

// String returns a string representation of the packet.
func (p *QuoteResponse) String() string {
	return fmt.Sprintf("QuoteResponse{ApplId: %v, ReportingPbuid: %v, SubmittingPbuid: %v, SecurityId: %v, SecurityIdsource: %v, OwnerType: %v, ClearingFirm: %v, TransactTime: %v, UserInfo: %v, ClOrdId: %v, AccountId: %v, BranchId: %v, QuoteRespId: %v, QuoteRespType: %v, Side: %v, ValidUntilTime: %v, QuoteType: %v, PriceType: %v, Quote2: %v, ApplExtend: %v}", p.ApplId, p.ReportingPbuid, p.SubmittingPbuid, p.SecurityId, p.SecurityIdsource, p.OwnerType, p.ClearingFirm, p.TransactTime, p.UserInfo, p.ClOrdId, p.AccountId, p.BranchId, p.QuoteRespId, p.QuoteRespType, p.Side, p.ValidUntilTime, p.QuoteType, p.PriceType, p.Quote2, p.ApplExtend)
}

// Encode encodes the packet into a byte slice.
func (p *QuoteResponse) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteFixedString(buf, p.ApplId, 3); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.ReportingPbuid, 6); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.SubmittingPbuid, 6); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.SecurityId, 8); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.SecurityIdsource, 4); err != nil {
		return err
	}
	if err := codec.WriteBasicTypeLE(buf, p.OwnerType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OwnerType", err)
	}
	if err := codec.WriteFixedString(buf, p.ClearingFirm, 2); err != nil {
		return err
	}
	if err := codec.WriteBasicTypeLE(buf, p.TransactTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TransactTime", err)
	}
	if err := codec.WriteFixedString(buf, p.UserInfo, 32); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.ClOrdId, 10); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.AccountId, 10); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.BranchId, 2); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.QuoteRespId, 10); err != nil {
		return err
	}
	if err := codec.WriteBasicTypeLE(buf, p.QuoteRespType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuoteRespType", err)
	}
	if err := codec.WriteFixedString(buf, p.Side, 1); err != nil {
		return err
	}
	if err := codec.WriteBasicTypeLE(buf, p.ValidUntilTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ValidUntilTime", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.QuoteType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuoteType", err)
	}
	if err := codec.WriteBasicTypeLE(buf, p.PriceType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PriceType", err)
	}
	if err := codec.WriteObjectListLE[uint16](buf, p.Quote2); err != nil {
		return err
	}
	if p.ApplExtend == nil {
		if val, err := NewQuoteResponseMessageByApplId(p.ApplId); err != nil {
			return err
		} else {
			p.ApplExtend = val
		}
	}
	if err := p.ApplExtend.Encode(buf); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *QuoteResponse) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadFixedString(buf, 3); err != nil {
		return err
	} else {
		p.ApplId = val
	}
	if val, err := codec.ReadFixedString(buf, 6); err != nil {
		return err
	} else {
		p.ReportingPbuid = val
	}
	if val, err := codec.ReadFixedString(buf, 6); err != nil {
		return err
	} else {
		p.SubmittingPbuid = val
	}
	if val, err := codec.ReadFixedString(buf, 8); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.ReadFixedString(buf, 4); err != nil {
		return err
	} else {
		p.SecurityIdsource = val
	}
	if val, err := codec.ReadBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.OwnerType = val
	}
	if val, err := codec.ReadFixedString(buf, 2); err != nil {
		return err
	} else {
		p.ClearingFirm = val
	}
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.TransactTime = val
	}
	if val, err := codec.ReadFixedString(buf, 32); err != nil {
		return err
	} else {
		p.UserInfo = val
	}
	if val, err := codec.ReadFixedString(buf, 10); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.ReadFixedString(buf, 10); err != nil {
		return err
	} else {
		p.AccountId = val
	}
	if val, err := codec.ReadFixedString(buf, 2); err != nil {
		return err
	} else {
		p.BranchId = val
	}
	if val, err := codec.ReadFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteRespId = val
	}
	if val, err := codec.ReadBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.QuoteRespType = val
	}
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.Side = val
	}
	if val, err := codec.ReadBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.ValidUntilTime = val
	}
	if val, err := codec.ReadBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.QuoteType = val
	}
	if val, err := codec.ReadBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.PriceType = val
	}
	if val, err := codec.ReadObjectListLE[uint16](buf, func() *Quote2 { return &Quote2{} }); err != nil {
		return err
	} else {
		p.Quote2 = val
	}
	if val, err := NewQuoteResponseMessageByApplId(p.ApplId); err != nil {
		return err
	} else {
		p.ApplExtend = val
	}
	if err := p.ApplExtend.Decode(buf); err != nil {
		return err
	}
	return nil
}
