// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// ReportExtend010 represents the packet structure.
type ReportExtend010 struct {
	CashMargin  string `json:"CashMargin"`
	SettlType   string `json:"SettlType"`
	SettlPeriod string `json:"SettlPeriod"`
}

// NewReportExtend010 creates a new instance of ReportExtend010.
func NewReportExtend010() *ReportExtend010 {
	return &ReportExtend010{}
}

// String returns a string representation of the packet.
func (p *ReportExtend010) String() string {
	return fmt.Sprintf("ReportExtend010{CashMargin: %v, SettlType: %v, SettlPeriod: %v}", p.CashMargin, p.SettlType, p.SettlPeriod)
}

// Encode encodes the packet into a byte slice.
func (p *ReportExtend010) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteFixedString(buf, p.CashMargin, 1); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.SettlType, 1); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.SettlPeriod, 1); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ReportExtend010) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.CashMargin = val
	}
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.SettlType = val
	}
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.SettlPeriod = val
	}
	return nil
}
