// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
	RegistryAllegeQuoteApplIdFactory("070", func() codec.BinaryCodec { return &AllegeQuoteExtend070{} })
}

var allegeQuoteApplIdFactoryCache = map[string]func() codec.BinaryCodec{}

func RegistryAllegeQuoteApplIdFactory(applId string, factory func() codec.BinaryCodec) {
	allegeQuoteApplIdFactoryCache[applId] = factory
}

func NewAllegeQuoteMessageByApplId(key string) (codec.BinaryCodec, error) {
	if factory, ok := allegeQuoteApplIdFactoryCache[key]; ok {
		return factory(), nil
	}
	return nil, fmt.Errorf("unknown message type")
}

// AllegeQuote represents the packet structure.
type AllegeQuote struct {
	PartitionNo      int32             `json:"PartitionNo"`
	ReportIndex      int64             `json:"ReportIndex"`
	ApplId           string            `json:"ApplID"`
	ReportingPbuid   string            `json:"ReportingPBUID"`
	SubmittingPbuid  string            `json:"SubmittingPBUID"`
	SecurityId       string            `json:"SecurityID"`
	SecurityIdsource string            `json:"SecurityIDSource"`
	OwnerType        uint16            `json:"OwnerType"`
	ClearingFirm     string            `json:"ClearingFirm"`
	TransactTime     int64             `json:"TransactTime"`
	UserInfo         string            `json:"UserInfo"`
	OrderId          string            `json:"OrderID"`
	ExecId           string            `json:"ExecID"`
	ClOrdId          string            `json:"ClOrdID"`
	AccountId        string            `json:"AccountID"`
	QuoteReqId       string            `json:"QuoteReqID"`
	QuoteId          string            `json:"QuoteID"`
	QuoteRespId      string            `json:"QuoteRespID"`
	QuoteType        uint8             `json:"QuoteType"`
	BidPx            int64             `json:"BidPx"`
	OfferPx          int64             `json:"OfferPx"`
	BidSize          int64             `json:"BidSize"`
	OfferSize        int64             `json:"OfferSize"`
	PrivateQuote     uint8             `json:"PrivateQuote"`
	ValidUntilTime   int64             `json:"ValidUntilTime"`
	PriceType        uint8             `json:"PriceType"`
	Memo             string            `json:"Memo"`
	ApplExtend       codec.BinaryCodec `json:"ApplExtend"`
}

// NewAllegeQuote creates a new instance of AllegeQuote.
func NewAllegeQuote() *AllegeQuote {
	return &AllegeQuote{}
}

// String returns a string representation of the packet.
func (p *AllegeQuote) String() string {
	return fmt.Sprintf("AllegeQuote{PartitionNo: %v, ReportIndex: %v, ApplId: %v, ReportingPbuid: %v, SubmittingPbuid: %v, SecurityId: %v, SecurityIdsource: %v, OwnerType: %v, ClearingFirm: %v, TransactTime: %v, UserInfo: %v, OrderId: %v, ExecId: %v, ClOrdId: %v, AccountId: %v, QuoteReqId: %v, QuoteId: %v, QuoteRespId: %v, QuoteType: %v, BidPx: %v, OfferPx: %v, BidSize: %v, OfferSize: %v, PrivateQuote: %v, ValidUntilTime: %v, PriceType: %v, Memo: %v, ApplExtend: %v}", p.PartitionNo, p.ReportIndex, p.ApplId, p.ReportingPbuid, p.SubmittingPbuid, p.SecurityId, p.SecurityIdsource, p.OwnerType, p.ClearingFirm, p.TransactTime, p.UserInfo, p.OrderId, p.ExecId, p.ClOrdId, p.AccountId, p.QuoteReqId, p.QuoteId, p.QuoteRespId, p.QuoteType, p.BidPx, p.OfferPx, p.BidSize, p.OfferSize, p.PrivateQuote, p.ValidUntilTime, p.PriceType, p.Memo, p.ApplExtend)
}

// Encode encodes the packet into a byte slice.
func (p *AllegeQuote) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicTypeLE(buf, p.PartitionNo); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PartitionNo", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.ReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ReportIndex", err)
	}
	if err := codec.PutFixedString(buf, p.ApplId, 3); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ReportingPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SubmittingPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityId, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityIdsource, 4); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.OwnerType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OwnerType", err)
	}
	if err := codec.PutFixedString(buf, p.ClearingFirm, 2); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.TransactTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TransactTime", err)
	}
	if err := codec.PutFixedString(buf, p.UserInfo, 32); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrderId, 16); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ExecId, 16); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ClOrdId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.AccountId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.QuoteReqId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.QuoteId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.QuoteRespId, 10); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.QuoteType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuoteType", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.BidPx); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BidPx", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.OfferPx); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OfferPx", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.BidSize); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BidSize", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.OfferSize); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OfferSize", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.PrivateQuote); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PrivateQuote", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.ValidUntilTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ValidUntilTime", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.PriceType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PriceType", err)
	}
	if err := codec.PutFixedString(buf, p.Memo, 120); err != nil {
		return err
	}
	if err := p.ApplExtend.Encode(buf); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *AllegeQuote) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicTypeLE[int32](buf); err != nil {
		return err
	} else {
		p.PartitionNo = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.ReportIndex = val
	}
	if val, err := codec.GetFixedString(buf, 3); err != nil {
		return err
	} else {
		p.ApplId = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.ReportingPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.SubmittingPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.SecurityIdsource = val
	}
	if val, err := codec.GetBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.OwnerType = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.ClearingFirm = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.TransactTime = val
	}
	if val, err := codec.GetFixedString(buf, 32); err != nil {
		return err
	} else {
		p.UserInfo = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.OrderId = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.ExecId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.AccountId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteReqId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteRespId = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.QuoteType = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.BidPx = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.OfferPx = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.BidSize = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.OfferSize = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.PrivateQuote = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.ValidUntilTime = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.PriceType = val
	}
	if val, err := codec.GetFixedString(buf, 120); err != nil {
		return err
	} else {
		p.Memo = val
	}
	if val, err := NewAllegeQuoteMessageByApplId(p.ApplId); err != nil {
		return err
	} else {
		p.ApplExtend = val
	}
	if err := p.ApplExtend.Decode(buf); err != nil {
		return err
	}
	return nil
}
