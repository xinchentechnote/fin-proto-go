// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
	RegistryQuoteStatusReportApplIdFactory("070", func() codec.BinaryCodec { return &QuoteStatusReportExtend070{} })
}

var quoteStatusReportApplIdFactoryCache = map[string]func() codec.BinaryCodec{}

func RegistryQuoteStatusReportApplIdFactory(applId string, factory func() codec.BinaryCodec) {
	quoteStatusReportApplIdFactoryCache[applId] = factory
}

func NewQuoteStatusReportMessageByApplId(key string) (codec.BinaryCodec, error) {
	if factory, ok := quoteStatusReportApplIdFactoryCache[key]; ok {
		return factory(), nil
	}
	return nil, fmt.Errorf("unknown message type")
}

// QuoteStatusReport represents the packet structure.
type QuoteStatusReport struct {
	PartitionNo      int32             `json:"PartitionNo"`
	ReportIndex      int64             `json:"ReportIndex"`
	ApplId           string            `json:"ApplID"`
	ReportingPbuid   string            `json:"ReportingPBUID"`
	SubmittingPbuid  string            `json:"SubmittingPBUID"`
	SecurityId       string            `json:"SecurityID"`
	SecurityIdsource string            `json:"SecurityIDSource"`
	OwnerType        uint16            `json:"OwnerType"`
	ClearingFirm     string            `json:"ClearingFirm"`
	TransactTime     int64             `json:"TransactTime"`
	UserInfo         string            `json:"UserInfo"`
	QuoteMsgId       string            `json:"QuoteMsgID"`
	AccountId        string            `json:"AccountID"`
	QuoteReqId       string            `json:"QuoteReqID"`
	QuoteRjectReason uint64            `json:"QuoteRjectReason"`
	QuoteType        uint8             `json:"QuoteType"`
	BidPx            int64             `json:"BidPx"`
	OfferPx          int64             `json:"OfferPx"`
	BidSize          int64             `json:"BidSize"`
	OfferSize        int64             `json:"OfferSize"`
	ApplExtend       codec.BinaryCodec `json:"ApplExtend"`
}

// NewQuoteStatusReport creates a new instance of QuoteStatusReport.
func NewQuoteStatusReport() *QuoteStatusReport {
	return &QuoteStatusReport{}
}

// String returns a string representation of the packet.
func (p *QuoteStatusReport) String() string {
	return fmt.Sprintf("QuoteStatusReport{PartitionNo: %v, ReportIndex: %v, ApplId: %v, ReportingPbuid: %v, SubmittingPbuid: %v, SecurityId: %v, SecurityIdsource: %v, OwnerType: %v, ClearingFirm: %v, TransactTime: %v, UserInfo: %v, QuoteMsgId: %v, AccountId: %v, QuoteReqId: %v, QuoteRjectReason: %v, QuoteType: %v, BidPx: %v, OfferPx: %v, BidSize: %v, OfferSize: %v, ApplExtend: %v}", p.PartitionNo, p.ReportIndex, p.ApplId, p.ReportingPbuid, p.SubmittingPbuid, p.SecurityId, p.SecurityIdsource, p.OwnerType, p.ClearingFirm, p.TransactTime, p.UserInfo, p.QuoteMsgId, p.AccountId, p.QuoteReqId, p.QuoteRjectReason, p.QuoteType, p.BidPx, p.OfferPx, p.BidSize, p.OfferSize, p.ApplExtend)
}

// Encode encodes the packet into a byte slice.
func (p *QuoteStatusReport) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicTypeLE(buf, p.PartitionNo); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PartitionNo", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.ReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ReportIndex", err)
	}
	if err := codec.PutFixedString(buf, p.ApplId, 3); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ReportingPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SubmittingPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityId, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityIdsource, 4); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.OwnerType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OwnerType", err)
	}
	if err := codec.PutFixedString(buf, p.ClearingFirm, 2); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.TransactTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TransactTime", err)
	}
	if err := codec.PutFixedString(buf, p.UserInfo, 32); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.QuoteMsgId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.AccountId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.QuoteReqId, 10); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.QuoteRjectReason); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuoteRjectReason", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.QuoteType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QuoteType", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.BidPx); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BidPx", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.OfferPx); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OfferPx", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.BidSize); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BidSize", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.OfferSize); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OfferSize", err)
	}
	if err := p.ApplExtend.Encode(buf); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *QuoteStatusReport) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicTypeLE[int32](buf); err != nil {
		return err
	} else {
		p.PartitionNo = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.ReportIndex = val
	}
	if val, err := codec.GetFixedString(buf, 3); err != nil {
		return err
	} else {
		p.ApplId = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.ReportingPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.SubmittingPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.SecurityIdsource = val
	}
	if val, err := codec.GetBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.OwnerType = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.ClearingFirm = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.TransactTime = val
	}
	if val, err := codec.GetFixedString(buf, 32); err != nil {
		return err
	} else {
		p.UserInfo = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteMsgId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.AccountId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteReqId = val
	}
	if val, err := codec.GetBasicTypeLE[uint64](buf); err != nil {
		return err
	} else {
		p.QuoteRjectReason = val
	}
	if val, err := codec.GetBasicTypeLE[uint8](buf); err != nil {
		return err
	} else {
		p.QuoteType = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.BidPx = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.OfferPx = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.BidSize = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.OfferSize = val
	}
	if val, err := NewQuoteStatusReportMessageByApplId(p.ApplId); err != nil {
		return err
	} else {
		p.ApplExtend = val
	}
	if err := p.ApplExtend.Decode(buf); err != nil {
		return err
	}
	return nil
}
