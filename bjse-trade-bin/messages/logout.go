// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// Logout represents the packet structure.
type Logout struct {
	SessionStatus int32  `json:"SessionStatus"`
	Text          string `json:"Text"`
}

// NewLogout creates a new instance of Logout.
func NewLogout() *Logout {
	return &Logout{}
}

// String returns a string representation of the packet.
func (p *Logout) String() string {
	return fmt.Sprintf("Logout{SessionStatus: %v, Text: %v}", p.SessionStatus, p.Text)
}

// Encode encodes the packet into a byte slice.
func (p *Logout) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicTypeLE(buf, p.SessionStatus); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SessionStatus", err)
	}
	if err := codec.PutFixedString(buf, p.Text, 200); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Logout) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicTypeLE[int32](buf); err != nil {
		return err
	} else {
		p.SessionStatus = val
	}
	if val, err := codec.GetFixedString(buf, 200); err != nil {
		return err
	} else {
		p.Text = val
	}
	return nil
}
