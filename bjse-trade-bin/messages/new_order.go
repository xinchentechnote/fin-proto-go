// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// NewOrder represents the packet structure.
type NewOrder struct {
	ApplId            string            `json:"ApplID"`
	SubmittingPbuid   string            `json:"SubmittingPBUID"`
	SecurityId        string            `json:"SecurityID"`
	SecurityIdsource  string            `json:"SecurityIDSource"`
	OwnerType         uint16            `json:"OwnerType"`
	ClearingFirm      string            `json:"ClearingFirm"`
	TransactTime      int64             `json:"TransactTime"`
	UserInfo          string            `json:"UserInfo"`
	ClOrdId           string            `json:"ClOrdID"`
	AccountId         string            `json:"AccountID"`
	BranchId          string            `json:"BranchID"`
	OrderRestrictions string            `json:"OrderRestrictions"`
	Side              string            `json:"Side"`
	OrdType           string            `json:"OrdType"`
	OrderQty          int64             `json:"OrderQty"`
	Price             int64             `json:"Price"`
	ApplExtend        codec.BinaryCodec `json:"ApplExtend"`
}

// NewNewOrder creates a new instance of NewOrder.
func NewNewOrder() *NewOrder {
	return &NewOrder{}
}

// String returns a string representation of the packet.
func (p *NewOrder) String() string {
	return fmt.Sprintf("NewOrder{ApplId: %v, SubmittingPbuid: %v, SecurityId: %v, SecurityIdsource: %v, OwnerType: %v, ClearingFirm: %v, TransactTime: %v, UserInfo: %v, ClOrdId: %v, AccountId: %v, BranchId: %v, OrderRestrictions: %v, Side: %v, OrdType: %v, OrderQty: %v, Price: %v, ApplExtend: %v}", p.ApplId, p.SubmittingPbuid, p.SecurityId, p.SecurityIdsource, p.OwnerType, p.ClearingFirm, p.TransactTime, p.UserInfo, p.ClOrdId, p.AccountId, p.BranchId, p.OrderRestrictions, p.Side, p.OrdType, p.OrderQty, p.Price, p.ApplExtend)
}

// Encode encodes the packet into a byte slice.
func (p *NewOrder) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.ApplId, 3); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SubmittingPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityId, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityIdsource, 4); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.OwnerType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OwnerType", err)
	}
	if err := codec.PutFixedString(buf, p.ClearingFirm, 2); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.TransactTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TransactTime", err)
	}
	if err := codec.PutFixedString(buf, p.UserInfo, 32); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ClOrdId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.AccountId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.BranchId, 2); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrderRestrictions, 4); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.Side, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrdType, 1); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.OrderQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrderQty", err)
	}
	if err := codec.PutBasicTypeLE(buf, p.Price); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Price", err)
	}
	if err := p.ApplExtend.Encode(buf); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *NewOrder) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 3); err != nil {
		return err
	} else {
		p.ApplId = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.SubmittingPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.SecurityIdsource = val
	}
	if val, err := codec.GetBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.OwnerType = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.ClearingFirm = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.TransactTime = val
	}
	if val, err := codec.GetFixedString(buf, 32); err != nil {
		return err
	} else {
		p.UserInfo = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.AccountId = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.BranchId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.OrderRestrictions = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.Side = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.OrdType = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.OrderQty = val
	}
	if val, err := codec.GetBasicTypeLE[int64](buf); err != nil {
		return err
	} else {
		p.Price = val
	}
	switch p.ApplId {
	case "010":
		p.ApplExtend = &ExtendNewOrder010{}
	case "040":
		p.ApplExtend = &ExtendNewOrder040{}
	case "041":
		p.ApplExtend = &ExtendNewOrder041{}
	case "042":
		p.ApplExtend = &ExtendNewOrder042{}
	case "043":
		p.ApplExtend = &ExtendNewOrder043{}
	case "044":
		p.ApplExtend = &ExtendNewOrder044{}
	case "045":
		p.ApplExtend = &ExtendNewOrder045{}
	case "050":
		p.ApplExtend = &ExtendNewOrder050{}
	default:
		return fmt.Errorf("unsupported ApplId: %v", p.ApplId)
	}
	if err := p.ApplExtend.Decode(buf); err != nil {
		return err
	}
	return nil
}
