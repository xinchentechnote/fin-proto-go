// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// Logon represents the packet structure.
type Logon struct {
	SenderCompId     string `json:"SenderCompID"`
	TargetCompId     string `json:"TargetCompID"`
	HeartBtInt       int32  `json:"HeartBtInt"`
	Password         string `json:"Password"`
	DefaultApplVerId string `json:"DefaultApplVerID"`
}

// NewLogon creates a new instance of Logon.
func NewLogon() *Logon {
	return &Logon{}
}

// String returns a string representation of the packet.
func (p *Logon) String() string {
	return fmt.Sprintf("Logon{SenderCompId: %v, TargetCompId: %v, HeartBtInt: %v, Password: %v, DefaultApplVerId: %v}", p.SenderCompId, p.TargetCompId, p.HeartBtInt, p.Password, p.DefaultApplVerId)
}

// Encode encodes the packet into a byte slice.
func (p *Logon) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.SenderCompId, 20); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.TargetCompId, 20); err != nil {
		return err
	}
	if err := codec.PutBasicTypeLE(buf, p.HeartBtInt); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "HeartBtInt", err)
	}
	if err := codec.PutFixedString(buf, p.Password, 16); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.DefaultApplVerId, 32); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Logon) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 20); err != nil {
		return err
	} else {
		p.SenderCompId = val
	}
	if val, err := codec.GetFixedString(buf, 20); err != nil {
		return err
	} else {
		p.TargetCompId = val
	}
	if val, err := codec.GetBasicTypeLE[int32](buf); err != nil {
		return err
	} else {
		p.HeartBtInt = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.Password = val
	}
	if val, err := codec.GetFixedString(buf, 32); err != nil {
		return err
	} else {
		p.DefaultApplVerId = val
	}
	return nil
}
