// Code generated by fin-protoc. DO NOT EDIT.
package bjse_trade_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// AllegeQuoteExtend070 represents the packet structure.
type AllegeQuoteExtend070 struct {
	CashMargin        string `json:"CashMargin"`
	CounterPartyPbuid string `json:"CounterPartyPBUID"`
}

// NewAllegeQuoteExtend070 creates a new instance of AllegeQuoteExtend070.
func NewAllegeQuoteExtend070() *AllegeQuoteExtend070 {
	return &AllegeQuoteExtend070{}
}

// String returns a string representation of the packet.
func (p *AllegeQuoteExtend070) String() string {
	return fmt.Sprintf("AllegeQuoteExtend070{CashMargin: %v, CounterPartyPbuid: %v}", p.CashMargin, p.CounterPartyPbuid)
}

// Encode encodes the packet into a byte slice.
func (p *AllegeQuoteExtend070) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.CashMargin, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CounterPartyPbuid, 6); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *AllegeQuoteExtend070) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.CashMargin = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.CounterPartyPbuid = val
	}
	return nil
}
