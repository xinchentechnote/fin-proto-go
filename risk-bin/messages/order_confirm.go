// Code generated by fin-protoc. DO NOT EDIT.
package risk_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// OrderConfirm represents the packet structure.
type OrderConfirm struct {
	ClOrdId      string `json:"ClOrdID"`
	ExecType     string `json:"ExecType"`
	OrdRejReason uint32 `json:"OrdRejReason"`
	OrdCnfmId    string `json:"OrdCnfmID"`
}

// NewOrderConfirm creates a new instance of OrderConfirm.
func NewOrderConfirm() *OrderConfirm {
	return &OrderConfirm{}
}

// String returns a string representation of the packet.
func (p *OrderConfirm) String() string {
	return fmt.Sprintf("OrderConfirm{ClOrdId: %v, ExecType: %v, OrdRejReason: %v, OrdCnfmId: %v}", p.ClOrdId, p.ExecType, p.OrdRejReason, p.OrdCnfmId)
}

// Encode encodes the packet into a byte slice.
func (p *OrderConfirm) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutString[uint32](buf, p.ClOrdId); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ExecType, 1); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OrdRejReason); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrdRejReason", err)
	}
	if err := codec.PutString[uint32](buf, p.OrdCnfmId); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *OrderConfirm) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetString[uint32](buf); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.ExecType = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.OrdRejReason = val
	}
	if val, err := codec.GetString[uint32](buf); err != nil {
		return err
	} else {
		p.OrdCnfmId = val
	}
	return nil
}
