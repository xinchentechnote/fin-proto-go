// Code generated by fin-protoc. DO NOT EDIT.
package risk_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// OrderCancel represents the packet structure.
type OrderCancel struct {
	ClOrdId     string `json:"ClOrdID"`
	OrigClOrdId string `json:"OrigClOrdID"`
	SecurityId  string `json:"SecurityID"`
}

// NewOrderCancel creates a new instance of OrderCancel.
func NewOrderCancel() *OrderCancel {
	return &OrderCancel{}
}

// String returns a string representation of the packet.
func (p *OrderCancel) String() string {
	return fmt.Sprintf("OrderCancel{ClOrdId: %v, OrigClOrdId: %v, SecurityId: %v}", p.ClOrdId, p.OrigClOrdId, p.SecurityId)
}

// Encode encodes the packet into a byte slice.
func (p *OrderCancel) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutString[uint32](buf, p.ClOrdId); err != nil {
		return err
	}
	if err := codec.PutString[uint32](buf, p.OrigClOrdId); err != nil {
		return err
	}
	if err := codec.PutString[uint32](buf, p.SecurityId); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *OrderCancel) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetString[uint32](buf); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.GetString[uint32](buf); err != nil {
		return err
	} else {
		p.OrigClOrdId = val
	}
	if val, err := codec.GetString[uint32](buf); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	return nil
}
