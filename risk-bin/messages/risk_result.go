// Code generated by fin-protoc. DO NOT EDIT.
package risk_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// RiskResult represents the packet structure.
type RiskResult struct {
	UniqueOrderId string `json:"UniqueOrderID"`
	RiskStatus    uint8  `json:"RiskStatus"`
	RiskReason    string `json:"RiskReason"`
}

// NewRiskResult creates a new instance of RiskResult.
func NewRiskResult() *RiskResult {
	return &RiskResult{}
}

// String returns a string representation of the packet.
func (p *RiskResult) String() string {
	return fmt.Sprintf("RiskResult{UniqueOrderId: %v, RiskStatus: %v, RiskReason: %v}", p.UniqueOrderId, p.RiskStatus, p.RiskReason)
}

// Encode encodes the packet into a byte slice.
func (p *RiskResult) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteString[uint32](buf, p.UniqueOrderId); err != nil {
		return err
	}
	if err := codec.WriteBasicType(buf, p.RiskStatus); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "RiskStatus", err)
	}
	if err := codec.WriteString[uint32](buf, p.RiskReason); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *RiskResult) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.UniqueOrderId = val
	}
	if val, err := codec.ReadBasicType[uint8](buf); err != nil {
		return err
	} else {
		p.RiskStatus = val
	}
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.RiskReason = val
	}
	return nil
}
