// Code generated by fin-protoc. DO NOT EDIT.
package risk_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// NewOrder represents the packet structure.
type NewOrder struct {
	UniqueOrderId string `json:"UniqueOrderID"`
	ClOrdId       string `json:"ClOrdID"`
	SecurityId    string `json:"SecurityID"`
	Side          string `json:"Side"`
	Price         uint64 `json:"Price"`
	OrderQty      uint64 `json:"OrderQty"`
	OrdType       string `json:"OrdType"`
	Account       string `json:"Account"`
}

// NewNewOrder creates a new instance of NewOrder.
func NewNewOrder() *NewOrder {
	return &NewOrder{}
}

// String returns a string representation of the packet.
func (p *NewOrder) String() string {
	return fmt.Sprintf("NewOrder{UniqueOrderId: %v, ClOrdId: %v, SecurityId: %v, Side: %v, Price: %v, OrderQty: %v, OrdType: %v, Account: %v}", p.UniqueOrderId, p.ClOrdId, p.SecurityId, p.Side, p.Price, p.OrderQty, p.OrdType, p.Account)
}

// Encode encodes the packet into a byte slice.
func (p *NewOrder) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteString[uint32](buf, p.UniqueOrderId); err != nil {
		return err
	}
	if err := codec.WriteString[uint32](buf, p.ClOrdId); err != nil {
		return err
	}
	if err := codec.WriteString[uint32](buf, p.SecurityId); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.Side, 1); err != nil {
		return err
	}
	if err := codec.WriteBasicType(buf, p.Price); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Price", err)
	}
	if err := codec.WriteBasicType(buf, p.OrderQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrderQty", err)
	}
	if err := codec.WriteFixedString(buf, p.OrdType, 1); err != nil {
		return err
	}
	if err := codec.WriteString[uint32](buf, p.Account); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *NewOrder) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.UniqueOrderId = val
	}
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.Side = val
	}
	if val, err := codec.ReadBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.Price = val
	}
	if val, err := codec.ReadBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.OrderQty = val
	}
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.OrdType = val
	}
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.Account = val
	}
	return nil
}
