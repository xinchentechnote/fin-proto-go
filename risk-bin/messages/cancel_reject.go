// Code generated by fin-protoc. DO NOT EDIT.
package risk_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// CancelReject represents the packet structure.
type CancelReject struct {
	UniqueOrderId     string `json:"UniqueOrderID"`
	UniqueOrigOrderId string `json:"UniqueOrigOrderID"`
	ClOrdId           string `json:"ClOrdID"`
	OrigClOrdId       string `json:"OrigClOrdID"`
	CxlRejReason      uint32 `json:"CxlRejReason"`
}

// NewCancelReject creates a new instance of CancelReject.
func NewCancelReject() *CancelReject {
	return &CancelReject{}
}

// String returns a string representation of the packet.
func (p *CancelReject) String() string {
	return fmt.Sprintf("CancelReject{UniqueOrderId: %v, UniqueOrigOrderId: %v, ClOrdId: %v, OrigClOrdId: %v, CxlRejReason: %v}", p.UniqueOrderId, p.UniqueOrigOrderId, p.ClOrdId, p.OrigClOrdId, p.CxlRejReason)
}

// Encode encodes the packet into a byte slice.
func (p *CancelReject) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteString[uint32](buf, p.UniqueOrderId); err != nil {
		return err
	}
	if err := codec.WriteString[uint32](buf, p.UniqueOrigOrderId); err != nil {
		return err
	}
	if err := codec.WriteString[uint32](buf, p.ClOrdId); err != nil {
		return err
	}
	if err := codec.WriteString[uint32](buf, p.OrigClOrdId); err != nil {
		return err
	}
	if err := codec.WriteBasicType(buf, p.CxlRejReason); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "CxlRejReason", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *CancelReject) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.UniqueOrderId = val
	}
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.UniqueOrigOrderId = val
	}
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.OrigClOrdId = val
	}
	if val, err := codec.ReadBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.CxlRejReason = val
	}
	return nil
}
