// Code generated by fin-protoc. DO NOT EDIT.
package risk_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// ExecutionReport represents the packet structure.
type ExecutionReport struct {
	UniqueOrderId string `json:"UniqueOrderID"`
	ClOrdId       string `json:"ClOrdID"`
	OrdCnfmId     string `json:"OrdCnfmID"`
	LastPx        uint64 `json:"LastPx"`
	LastQty       uint64 `json:"LastQty"`
	OrdStatus     string `json:"OrdStatus"`
}

// NewExecutionReport creates a new instance of ExecutionReport.
func NewExecutionReport() *ExecutionReport {
	return &ExecutionReport{}
}

// String returns a string representation of the packet.
func (p *ExecutionReport) String() string {
	return fmt.Sprintf("ExecutionReport{UniqueOrderId: %v, ClOrdId: %v, OrdCnfmId: %v, LastPx: %v, LastQty: %v, OrdStatus: %v}", p.UniqueOrderId, p.ClOrdId, p.OrdCnfmId, p.LastPx, p.LastQty, p.OrdStatus)
}

// Encode encodes the packet into a byte slice.
func (p *ExecutionReport) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutString[uint32](buf, p.UniqueOrderId); err != nil {
		return err
	}
	if err := codec.PutString[uint32](buf, p.ClOrdId); err != nil {
		return err
	}
	if err := codec.PutString[uint32](buf, p.OrdCnfmId); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.LastPx); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "LastPx", err)
	}
	if err := codec.PutBasicType(buf, p.LastQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "LastQty", err)
	}
	if err := codec.PutFixedString(buf, p.OrdStatus, 1); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ExecutionReport) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetString[uint32](buf); err != nil {
		return err
	} else {
		p.UniqueOrderId = val
	}
	if val, err := codec.GetString[uint32](buf); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.GetString[uint32](buf); err != nil {
		return err
	} else {
		p.OrdCnfmId = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.LastPx = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.LastQty = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.OrdStatus = val
	}
	return nil
}
