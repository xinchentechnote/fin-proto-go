// Code generated by fin-protoc. DO NOT EDIT.
package risk_bin

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
	RegistryRcBinaryMsgTypeFactory(100101, func() codec.BinaryCodec { return &NewOrder{} })
	RegistryRcBinaryMsgTypeFactory(200102, func() codec.BinaryCodec { return &OrderConfirm{} })
	RegistryRcBinaryMsgTypeFactory(200115, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistryRcBinaryMsgTypeFactory(190007, func() codec.BinaryCodec { return &OrderCancel{} })
	RegistryRcBinaryMsgTypeFactory(290008, func() codec.BinaryCodec { return &CancelReject{} })
	RegistryRcBinaryMsgTypeFactory(800001, func() codec.BinaryCodec { return &RiskResult{} })
}

var rcBinaryMsgTypeFactoryCache = map[uint32]func() codec.BinaryCodec{}

func RegistryRcBinaryMsgTypeFactory(msgType uint32, factory func() codec.BinaryCodec) {
	rcBinaryMsgTypeFactoryCache[msgType] = factory
}

func NewRcBinaryMessageByMsgType(key uint32) (codec.BinaryCodec, error) {
	if factory, ok := rcBinaryMsgTypeFactoryCache[key]; ok {
		return factory(), nil
	}
	return nil, fmt.Errorf("unknown message type")
}

// RcBinary represents the packet structure.
type RcBinary struct {
	MsgType    uint32            `json:"MsgType"`
	Version    uint32            `json:"Version"`
	MsgBodyLen uint32            `json:"MsgBodyLen"`
	Body       codec.BinaryCodec `json:"Body"`
}

// NewRcBinary creates a new instance of RcBinary.
func NewRcBinary() *RcBinary {
	return &RcBinary{}
}

// String returns a string representation of the packet.
func (p *RcBinary) String() string {
	return fmt.Sprintf("RcBinary{MsgType: %v, Version: %v, MsgBodyLen: %v, Body: %v}", p.MsgType, p.Version, p.MsgBodyLen, p.Body)
}

// Encode encodes the packet into a byte slice.
func (p *RcBinary) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteBasicType(buf, p.MsgType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgType", err)
	}
	if err := codec.WriteBasicType(buf, p.Version); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Version", err)
	}
	bodyPos := buf.Len()
	if err := codec.WriteBasicType(buf, uint32(0)); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgBodyLen", err)
	}
	bodyStart := buf.Len()
	if p.Body != nil {
		if err := p.Body.Encode(buf); err != nil {
			return err
		}
	}
	bodyEnd := buf.Len()
	p.MsgBodyLen = uint32(bodyEnd - bodyStart)
	binary.BigEndian.PutUint32(buf.Bytes()[bodyPos:bodyPos+4], p.MsgBodyLen)
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *RcBinary) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MsgType = val
	}
	if val, err := codec.ReadBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.Version = val
	}
	if val, err := codec.ReadBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MsgBodyLen = val
	}
	if val, err := NewRcBinaryMessageByMsgType(p.MsgType); err != nil {
		return err
	} else {
		p.Body = val
	}
	if err := p.Body.Decode(buf); err != nil {
		return err
	}
	return nil
}
