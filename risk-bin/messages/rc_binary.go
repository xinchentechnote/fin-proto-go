// Code generated by fin-protoc. DO NOT EDIT.
package risk_bin

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
	RegisterMessage(100101, func() codec.BinaryCodec { return &NewOrder{} })
	RegisterMessage(200102, func() codec.BinaryCodec { return &OrderConfirm{} })
	RegisterMessage(200115, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegisterMessage(190007, func() codec.BinaryCodec { return &OrderCancel{} })
	RegisterMessage(290008, func() codec.BinaryCodec { return &CancelReject{} })
}

// RiskMessageFactory message factory
type RiskMessageFactory func() codec.BinaryCodec

var registry = map[uint32]RiskMessageFactory{}

// RegisterMessage registers a message type with its factory function.
func RegisterMessage(msgType uint32, factory RiskMessageFactory) {
	registry[msgType] = factory
}

// NewMessageByMsgType new message by type
func NewMessageByMsgType(msgType uint32) (codec.BinaryCodec, error) {
	if factory, ok := registry[msgType]; ok {
		return factory(), nil
	}
	return nil, fmt.Errorf("unknown message type: %d", msgType)
}

// RcBinary represents the packet structure.
type RcBinary struct {
	MsgType    uint32            `json:"MsgType"`
	Version    uint32            `json:"Version"`
	MsgBodyLen uint32            `json:"MsgBodyLen"`
	Body       codec.BinaryCodec `json:"Body"`
}

// NewRcBinary creates a new instance of RcBinary.
func NewRcBinary() *RcBinary {
	return &RcBinary{}
}

// String returns a string representation of the packet.
func (p *RcBinary) String() string {
	return fmt.Sprintf("RcBinary{MsgType: %v, Version: %v, MsgBodyLen: %v, Body: %v}", p.MsgType, p.Version, p.MsgBodyLen, p.Body)
}

// Encode encodes the packet into a byte slice.
func (p *RcBinary) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.MsgType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgType", err)
	}
	if err := codec.PutBasicType(buf, p.Version); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Version", err)
	}
	var BodyBuf bytes.Buffer
	if err := p.Body.Encode(&BodyBuf); err != nil {
		return err
	}
	p.MsgBodyLen = uint32(BodyBuf.Available())
	if err := codec.PutBasicType(buf, p.MsgBodyLen); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgBodyLen", err)
	}
	if err := binary.Write(buf, binary.BigEndian, BodyBuf.Bytes()); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *RcBinary) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MsgType = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.Version = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MsgBodyLen = val
	}
	if body, err := NewMessageByMsgType(p.MsgType); err != nil {
		return err
	} else {
		p.Body = body
	}
	if err := p.Body.Decode(buf); err != nil {
		return err
	}
	return nil
}
