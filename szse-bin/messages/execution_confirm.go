// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// ExecutionConfirm represents the packet structure.
type ExecutionConfirm struct {
	PartitionNo       int32             `json:"PartitionNo"`
	ReportIndex       int64             `json:"ReportIndex"`
	ApplId            string            `json:"ApplID"`
	ReportingPbuid    string            `json:"ReportingPBUID"`
	SubmittingPbuid   string            `json:"SubmittingPBUID"`
	SecurityId        string            `json:"SecurityID"`
	SecurityIdsource  string            `json:"SecurityIDSource"`
	OwnerType         uint16            `json:"OwnerType"`
	ClearingFirm      string            `json:"ClearingFirm"`
	TransactTime      int64             `json:"TransactTime"`
	UserInfo          string            `json:"UserInfo"`
	OrderId           string            `json:"OrderID"`
	ClOrdId           string            `json:"ClOrdID"`
	QuoteMsgId        string            `json:"QuoteMsgID"`
	OrigClOrdId       string            `json:"OrigClOrdID"`
	ExecId            string            `json:"ExecID"`
	ExecType          string            `json:"ExecType"`
	OrdStatus         string            `json:"OrdStatus"`
	OrdRejReason      uint16            `json:"OrdRejReason"`
	LeavesQty         int64             `json:"LeavesQty"`
	CumQty            int64             `json:"CumQty"`
	Side              string            `json:"Side"`
	OrdType           string            `json:"OrdType"`
	OrderQty          int64             `json:"OrderQty"`
	Price             int64             `json:"Price"`
	AccountId         string            `json:"AccountID"`
	BranchId          string            `json:"BranchID"`
	OrderRestrictions string            `json:"OrderRestrictions"`
	ApplExtend        codec.BinaryCodec `json:"ApplExtend"`
}

// NewExecutionConfirm creates a new instance of ExecutionConfirm.
func NewExecutionConfirm() *ExecutionConfirm {
	return &ExecutionConfirm{}
}

// String returns a string representation of the packet.
func (p *ExecutionConfirm) String() string {
	return fmt.Sprintf("ExecutionConfirm{PartitionNo: %v, ReportIndex: %v, ApplId: %v, ReportingPbuid: %v, SubmittingPbuid: %v, SecurityId: %v, SecurityIdsource: %v, OwnerType: %v, ClearingFirm: %v, TransactTime: %v, UserInfo: %v, OrderId: %v, ClOrdId: %v, QuoteMsgId: %v, OrigClOrdId: %v, ExecId: %v, ExecType: %v, OrdStatus: %v, OrdRejReason: %v, LeavesQty: %v, CumQty: %v, Side: %v, OrdType: %v, OrderQty: %v, Price: %v, AccountId: %v, BranchId: %v, OrderRestrictions: %v, ApplExtend: %v}", p.PartitionNo, p.ReportIndex, p.ApplId, p.ReportingPbuid, p.SubmittingPbuid, p.SecurityId, p.SecurityIdsource, p.OwnerType, p.ClearingFirm, p.TransactTime, p.UserInfo, p.OrderId, p.ClOrdId, p.QuoteMsgId, p.OrigClOrdId, p.ExecId, p.ExecType, p.OrdStatus, p.OrdRejReason, p.LeavesQty, p.CumQty, p.Side, p.OrdType, p.OrderQty, p.Price, p.AccountId, p.BranchId, p.OrderRestrictions, p.ApplExtend)
}

// Encode encodes the packet into a byte slice.
func (p *ExecutionConfirm) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.PartitionNo); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PartitionNo", err)
	}
	if err := codec.PutBasicType(buf, p.ReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ReportIndex", err)
	}
	if err := codec.PutFixedString(buf, p.ApplId, 3); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ReportingPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SubmittingPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityId, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityIdsource, 4); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OwnerType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OwnerType", err)
	}
	if err := codec.PutFixedString(buf, p.ClearingFirm, 2); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.TransactTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TransactTime", err)
	}
	if err := codec.PutFixedString(buf, p.UserInfo, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrderId, 16); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ClOrdId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.QuoteMsgId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrigClOrdId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ExecId, 16); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ExecType, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrdStatus, 1); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OrdRejReason); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrdRejReason", err)
	}
	if err := codec.PutBasicType(buf, p.LeavesQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "LeavesQty", err)
	}
	if err := codec.PutBasicType(buf, p.CumQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "CumQty", err)
	}
	if err := codec.PutFixedString(buf, p.Side, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrdType, 1); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OrderQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrderQty", err)
	}
	if err := codec.PutBasicType(buf, p.Price); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Price", err)
	}
	if err := codec.PutFixedString(buf, p.AccountId, 12); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.BranchId, 4); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrderRestrictions, 4); err != nil {
		return err
	}
	if err := p.ApplExtend.Encode(buf); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ExecutionConfirm) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[int32](buf); err != nil {
		return err
	} else {
		p.PartitionNo = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.ReportIndex = val
	}
	if val, err := codec.GetFixedString(buf, 3); err != nil {
		return err
	} else {
		p.ApplId = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.ReportingPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.SubmittingPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.SecurityIdsource = val
	}
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.OwnerType = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.ClearingFirm = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.TransactTime = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.UserInfo = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.OrderId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.QuoteMsgId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.OrigClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.ExecId = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.ExecType = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.OrdStatus = val
	}
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.OrdRejReason = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.LeavesQty = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.CumQty = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.Side = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.OrdType = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.OrderQty = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.Price = val
	}
	if val, err := codec.GetFixedString(buf, 12); err != nil {
		return err
	} else {
		p.AccountId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.BranchId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.OrderRestrictions = val
	}
	switch p.ApplId {
	case "010":
		p.ApplExtend = &Extend200102{}
	case "020":
		p.ApplExtend = &Extend200202{}
	case "030":
		p.ApplExtend = &Extend200302{}
	case "051":
		p.ApplExtend = &Extend200502{}
	case "052":
		p.ApplExtend = &Extend200502{}
	case "060":
		p.ApplExtend = &Extend200602{}
	case "061":
		p.ApplExtend = &Extend200602{}
	case "070":
		p.ApplExtend = &Extend200702{}
	case "150":
		p.ApplExtend = &Extend201502{}
	case "151":
		p.ApplExtend = &Extend201502{}
	case "152":
		p.ApplExtend = &Extend201502{}
	case "160":
		p.ApplExtend = &Extend201602{}
	case "170":
		p.ApplExtend = &Extend201702{}
	case "180":
		p.ApplExtend = &Extend201802{}
	case "181":
		p.ApplExtend = &Extend201802{}
	case "270":
		p.ApplExtend = &Extend202702{}
	case "271":
		p.ApplExtend = &Extend202702{}
	case "280":
		p.ApplExtend = &Extend202802{}
	case "281":
		p.ApplExtend = &Extend202802{}
	case "290":
		p.ApplExtend = &Extend202902{}
	case "291":
		p.ApplExtend = &Extend202902{}
	case "630":
		p.ApplExtend = &Extend206302{}
	case "350":
		p.ApplExtend = &Extend203502{}
	case "351":
		p.ApplExtend = &Extend203502{}
	case "370":
		p.ApplExtend = &Extend203702{}
	case "410":
		p.ApplExtend = &Extend204102{}
	case "417":
		p.ApplExtend = &Extend204129{}
	case "470":
		p.ApplExtend = &Extend204702{}
	default:
		return fmt.Errorf("unsupported ApplId: %v", p.ApplId)
	}
	if err := p.ApplExtend.Decode(buf); err != nil {
		return err
	}
	return nil
}
