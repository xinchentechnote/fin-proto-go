// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// Extend104128 represents the packet structure.
type Extend104128 struct {
	MemberId          string `json:"MemberID"`
	InvestorType      string `json:"InvestorType"`
	InvestorId        string `json:"InvestorID"`
	InvestorName      string `json:"InvestorName"`
	TraderCode        string `json:"TraderCode"`
	SecondaryOrderId  string `json:"SecondaryOrderID"`
	BidTransType      uint16 `json:"BidTransType"`
	BidExecInstType   uint16 `json:"BidExecInstType"`
	LowLimitPrice     int64  `json:"LowLimitPrice"`
	HighLimitPrice    int64  `json:"HighLimitPrice"`
	MinQty            int64  `json:"MinQty"`
	TradeDate         uint32 `json:"TradeDate"`
	SettlType         uint16 `json:"SettlType"`
	SettlPeriod       uint8  `json:"SettlPeriod"`
	PreTradeAnonymity uint8  `json:"PreTradeAnonymity"`
	CashMargin        string `json:"CashMargin"`
	Memo              string `json:"Memo"`
}

// NewExtend104128 creates a new instance of Extend104128.
func NewExtend104128() *Extend104128 {
	return &Extend104128{}
}

// String returns a string representation of the packet.
func (p *Extend104128) String() string {
	return fmt.Sprintf("Extend104128{MemberId: %v, InvestorType: %v, InvestorId: %v, InvestorName: %v, TraderCode: %v, SecondaryOrderId: %v, BidTransType: %v, BidExecInstType: %v, LowLimitPrice: %v, HighLimitPrice: %v, MinQty: %v, TradeDate: %v, SettlType: %v, SettlPeriod: %v, PreTradeAnonymity: %v, CashMargin: %v, Memo: %v}", p.MemberId, p.InvestorType, p.InvestorId, p.InvestorName, p.TraderCode, p.SecondaryOrderId, p.BidTransType, p.BidExecInstType, p.LowLimitPrice, p.HighLimitPrice, p.MinQty, p.TradeDate, p.SettlType, p.SettlPeriod, p.PreTradeAnonymity, p.CashMargin, p.Memo)
}

// Encode encodes the packet into a byte slice.
func (p *Extend104128) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.MemberId, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.InvestorType, 2); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.InvestorId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.InvestorName, 120); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.TraderCode, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecondaryOrderId, 16); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.BidTransType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BidTransType", err)
	}
	if err := codec.PutBasicType(buf, p.BidExecInstType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BidExecInstType", err)
	}
	if err := codec.PutBasicType(buf, p.LowLimitPrice); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "LowLimitPrice", err)
	}
	if err := codec.PutBasicType(buf, p.HighLimitPrice); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "HighLimitPrice", err)
	}
	if err := codec.PutBasicType(buf, p.MinQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MinQty", err)
	}
	if err := codec.PutBasicType(buf, p.TradeDate); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TradeDate", err)
	}
	if err := codec.PutBasicType(buf, p.SettlType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SettlType", err)
	}
	if err := codec.PutBasicType(buf, p.SettlPeriod); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SettlPeriod", err)
	}
	if err := codec.PutBasicType(buf, p.PreTradeAnonymity); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PreTradeAnonymity", err)
	}
	if err := codec.PutFixedString(buf, p.CashMargin, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.Memo, 160); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Extend104128) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.MemberId = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.InvestorType = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.InvestorId = val
	}
	if val, err := codec.GetFixedString(buf, 120); err != nil {
		return err
	} else {
		p.InvestorName = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.TraderCode = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.SecondaryOrderId = val
	}
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.BidTransType = val
	}
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.BidExecInstType = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.LowLimitPrice = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.HighLimitPrice = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.MinQty = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.TradeDate = val
	}
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.SettlType = val
	}
	if val, err := codec.GetBasicType[uint8](buf); err != nil {
		return err
	} else {
		p.SettlPeriod = val
	}
	if val, err := codec.GetBasicType[uint8](buf); err != nil {
		return err
	} else {
		p.PreTradeAnonymity = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.CashMargin = val
	}
	if val, err := codec.GetFixedString(buf, 160); err != nil {
		return err
	} else {
		p.Memo = val
	}
	return nil
}
