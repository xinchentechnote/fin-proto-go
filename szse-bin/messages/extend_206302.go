// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// Extend206302 represents the packet structure.
type Extend206302 struct {
	RejectText       string `json:"RejectText"`
	StopPx           int64  `json:"StopPx"`
	MinQty           int64  `json:"MinQty"`
	MaxPriceLevels   uint16 `json:"MaxPriceLevels"`
	TimeInForce      string `json:"TimeInForce"`
	LotType          string `json:"LotType"`
	ImcrejectTextLen uint32 `json:"IMCRejectTextLen"`
	ImcrejectText    string `json:"IMCRejectText"`
}

// NewExtend206302 creates a new instance of Extend206302.
func NewExtend206302() *Extend206302 {
	return &Extend206302{}
}

// String returns a string representation of the packet.
func (p *Extend206302) String() string {
	return fmt.Sprintf("Extend206302{RejectText: %v, StopPx: %v, MinQty: %v, MaxPriceLevels: %v, TimeInForce: %v, LotType: %v, ImcrejectTextLen: %v, ImcrejectText: %v}", p.RejectText, p.StopPx, p.MinQty, p.MaxPriceLevels, p.TimeInForce, p.LotType, p.ImcrejectTextLen, p.ImcrejectText)
}

// Encode encodes the packet into a byte slice.
func (p *Extend206302) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteFixedString(buf, p.RejectText, 16); err != nil {
		return err
	}
	if err := codec.WriteBasicType(buf, p.StopPx); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "StopPx", err)
	}
	if err := codec.WriteBasicType(buf, p.MinQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MinQty", err)
	}
	if err := codec.WriteBasicType(buf, p.MaxPriceLevels); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MaxPriceLevels", err)
	}
	if err := codec.WriteFixedString(buf, p.TimeInForce, 1); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.LotType, 1); err != nil {
		return err
	}
	if err := codec.WriteBasicType(buf, p.ImcrejectTextLen); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "IMCRejectTextLen", err)
	}
	if err := codec.WriteString[uint32](buf, p.ImcrejectText); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Extend206302) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadFixedString(buf, 16); err != nil {
		return err
	} else {
		p.RejectText = val
	}
	if val, err := codec.ReadBasicType[int64](buf); err != nil {
		return err
	} else {
		p.StopPx = val
	}
	if val, err := codec.ReadBasicType[int64](buf); err != nil {
		return err
	} else {
		p.MinQty = val
	}
	if val, err := codec.ReadBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.MaxPriceLevels = val
	}
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.TimeInForce = val
	}
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.LotType = val
	}
	if val, err := codec.ReadBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.ImcrejectTextLen = val
	}
	if val, err := codec.ReadString[uint32](buf); err != nil {
		return err
	} else {
		p.ImcrejectText = val
	}
	return nil
}
