// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
	RegistryNewOrderApplIdFactory("010", func() codec.BinaryCodec { return &Extend100101{} })
	RegistryNewOrderApplIdFactory("020", func() codec.BinaryCodec { return &Extend100201{} })
	RegistryNewOrderApplIdFactory("030", func() codec.BinaryCodec { return &Extend100301{} })
	RegistryNewOrderApplIdFactory("051", func() codec.BinaryCodec { return &Extend100501{} })
	RegistryNewOrderApplIdFactory("052", func() codec.BinaryCodec { return &Extend100501{} })
	RegistryNewOrderApplIdFactory("060", func() codec.BinaryCodec { return &Extend100601{} })
	RegistryNewOrderApplIdFactory("061", func() codec.BinaryCodec { return &Extend100601{} })
	RegistryNewOrderApplIdFactory("070", func() codec.BinaryCodec { return &Extend100701{} })
	RegistryNewOrderApplIdFactory("150", func() codec.BinaryCodec { return &Extend101501{} })
	RegistryNewOrderApplIdFactory("151", func() codec.BinaryCodec { return &Extend101501{} })
	RegistryNewOrderApplIdFactory("152", func() codec.BinaryCodec { return &Extend101501{} })
	RegistryNewOrderApplIdFactory("160", func() codec.BinaryCodec { return &Extend101601{} })
	RegistryNewOrderApplIdFactory("170", func() codec.BinaryCodec { return &Extend101701{} })
	RegistryNewOrderApplIdFactory("180", func() codec.BinaryCodec { return &Extend101801{} })
	RegistryNewOrderApplIdFactory("181", func() codec.BinaryCodec { return &Extend101801{} })
	RegistryNewOrderApplIdFactory("270", func() codec.BinaryCodec { return &Extend102701{} })
	RegistryNewOrderApplIdFactory("271", func() codec.BinaryCodec { return &Extend102701{} })
	RegistryNewOrderApplIdFactory("280", func() codec.BinaryCodec { return &Extend102801{} })
	RegistryNewOrderApplIdFactory("281", func() codec.BinaryCodec { return &Extend102801{} })
	RegistryNewOrderApplIdFactory("290", func() codec.BinaryCodec { return &Extend102901{} })
	RegistryNewOrderApplIdFactory("291", func() codec.BinaryCodec { return &Extend102901{} })
	RegistryNewOrderApplIdFactory("630", func() codec.BinaryCodec { return &Extend106301{} })
	RegistryNewOrderApplIdFactory("350", func() codec.BinaryCodec { return &Extend103501{} })
	RegistryNewOrderApplIdFactory("351", func() codec.BinaryCodec { return &Extend103501{} })
	RegistryNewOrderApplIdFactory("370", func() codec.BinaryCodec { return &Extend103701{} })
	RegistryNewOrderApplIdFactory("410", func() codec.BinaryCodec { return &Extend104101{} })
	RegistryNewOrderApplIdFactory("417", func() codec.BinaryCodec { return &Extend104128{} })
	RegistryNewOrderApplIdFactory("470", func() codec.BinaryCodec { return &Extend104701{} })
}

var newOrderApplIdFactoryCache = map[string]func() codec.BinaryCodec{}

func RegistryNewOrderApplIdFactory(applId string, factory func() codec.BinaryCodec) {
	newOrderApplIdFactoryCache[applId] = factory
}

func NewNewOrderMessageByApplId(key string) (codec.BinaryCodec, error) {
	if factory, ok := newOrderApplIdFactoryCache[key]; ok {
		return factory(), nil
	}
	return nil, fmt.Errorf("unknown message type")
}

// NewOrder represents the packet structure.
type NewOrder struct {
	ApplId            string            `json:"ApplID"`
	SubmittingPbuid   string            `json:"SubmittingPBUID"`
	SecurityId        string            `json:"SecurityID"`
	SecurityIdsource  string            `json:"SecurityIDSource"`
	OwnerType         uint16            `json:"OwnerType"`
	ClearingFirm      string            `json:"ClearingFirm"`
	TransactTime      int64             `json:"TransactTime"`
	UserInfo          string            `json:"UserInfo"`
	ClOrdId           string            `json:"ClOrdID"`
	AccountId         string            `json:"AccountID"`
	BranchId          string            `json:"BranchID"`
	OrderRestrictions string            `json:"OrderRestrictions"`
	Side              string            `json:"Side"`
	OrdType           string            `json:"OrdType"`
	OrderQty          int64             `json:"OrderQty"`
	Price             int64             `json:"Price"`
	ApplExtend        codec.BinaryCodec `json:"ApplExtend"`
}

// NewNewOrder creates a new instance of NewOrder.
func NewNewOrder() *NewOrder {
	return &NewOrder{}
}

// String returns a string representation of the packet.
func (p *NewOrder) String() string {
	return fmt.Sprintf("NewOrder{ApplId: %v, SubmittingPbuid: %v, SecurityId: %v, SecurityIdsource: %v, OwnerType: %v, ClearingFirm: %v, TransactTime: %v, UserInfo: %v, ClOrdId: %v, AccountId: %v, BranchId: %v, OrderRestrictions: %v, Side: %v, OrdType: %v, OrderQty: %v, Price: %v, ApplExtend: %v}", p.ApplId, p.SubmittingPbuid, p.SecurityId, p.SecurityIdsource, p.OwnerType, p.ClearingFirm, p.TransactTime, p.UserInfo, p.ClOrdId, p.AccountId, p.BranchId, p.OrderRestrictions, p.Side, p.OrdType, p.OrderQty, p.Price, p.ApplExtend)
}

// Encode encodes the packet into a byte slice.
func (p *NewOrder) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.ApplId, 3); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SubmittingPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityId, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityIdsource, 4); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OwnerType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OwnerType", err)
	}
	if err := codec.PutFixedString(buf, p.ClearingFirm, 2); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.TransactTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TransactTime", err)
	}
	if err := codec.PutFixedString(buf, p.UserInfo, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ClOrdId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.AccountId, 12); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.BranchId, 4); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrderRestrictions, 4); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.Side, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrdType, 1); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OrderQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrderQty", err)
	}
	if err := codec.PutBasicType(buf, p.Price); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Price", err)
	}
	if err := p.ApplExtend.Encode(buf); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *NewOrder) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 3); err != nil {
		return err
	} else {
		p.ApplId = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.SubmittingPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.SecurityIdsource = val
	}
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.OwnerType = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.ClearingFirm = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.TransactTime = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.UserInfo = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 12); err != nil {
		return err
	} else {
		p.AccountId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.BranchId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.OrderRestrictions = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.Side = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.OrdType = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.OrderQty = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.Price = val
	}
	if val, err := NewNewOrderMessageByApplId(p.ApplId); err != nil {
		return err
	} else {
		p.ApplExtend = val
	}
	if err := p.ApplExtend.Decode(buf); err != nil {
		return err
	}
	return nil
}
