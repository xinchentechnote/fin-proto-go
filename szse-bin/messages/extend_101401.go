// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// Extend101401 represents the packet structure.
type Extend101401 struct {
	StopPx              int64  `json:"StopPx"`
	MinQty              int64  `json:"MinQty"`
	MaxPriceLevels      uint16 `json:"MaxPriceLevels"`
	TimeInForce         string `json:"TimeInForce"`
	PositionEffect      string `json:"PositionEffect"`
	CoveredOrUncovered  uint8  `json:"CoveredOrUncovered"`
	ContractAccountCode string `json:"ContractAccountCode"`
	SecondaryOrderId    string `json:"SecondaryOrderID"`
}

// NewExtend101401 creates a new instance of Extend101401.
func NewExtend101401() *Extend101401 {
	return &Extend101401{}
}

// String returns a string representation of the packet.
func (p *Extend101401) String() string {
	return fmt.Sprintf("Extend101401{StopPx: %v, MinQty: %v, MaxPriceLevels: %v, TimeInForce: %v, PositionEffect: %v, CoveredOrUncovered: %v, ContractAccountCode: %v, SecondaryOrderId: %v}", p.StopPx, p.MinQty, p.MaxPriceLevels, p.TimeInForce, p.PositionEffect, p.CoveredOrUncovered, p.ContractAccountCode, p.SecondaryOrderId)
}

// Encode encodes the packet into a byte slice.
func (p *Extend101401) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.StopPx); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "StopPx", err)
	}
	if err := codec.PutBasicType(buf, p.MinQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MinQty", err)
	}
	if err := codec.PutBasicType(buf, p.MaxPriceLevels); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MaxPriceLevels", err)
	}
	if err := codec.PutFixedString(buf, p.TimeInForce, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.PositionEffect, 1); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.CoveredOrUncovered); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "CoveredOrUncovered", err)
	}
	if err := codec.PutFixedString(buf, p.ContractAccountCode, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecondaryOrderId, 16); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Extend101401) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.StopPx = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.MinQty = val
	}
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.MaxPriceLevels = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.TimeInForce = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.PositionEffect = val
	}
	if val, err := codec.GetBasicType[uint8](buf); err != nil {
		return err
	} else {
		p.CoveredOrUncovered = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.ContractAccountCode = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.SecondaryOrderId = val
	}
	return nil
}
