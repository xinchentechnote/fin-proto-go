// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// PartitionReport represents the packet structure.
type PartitionReport struct {
	PartitionNo int32 `json:"PartitionNo"`
	ReportIndex int64 `json:"ReportIndex"`
}

// NewPartitionReport creates a new instance of PartitionReport.
func NewPartitionReport() *PartitionReport {
	return &PartitionReport{}
}

// String returns a string representation of the packet.
func (p *PartitionReport) String() string {
	return fmt.Sprintf("PartitionReport{PartitionNo: %v, ReportIndex: %v}", p.PartitionNo, p.ReportIndex)
}

// Encode encodes the packet into a byte slice.
func (p *PartitionReport) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.PartitionNo); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PartitionNo", err)
	}
	if err := codec.PutBasicType(buf, p.ReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ReportIndex", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *PartitionReport) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[int32](buf); err != nil {
		return err
	} else {
		p.PartitionNo = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.ReportIndex = val
	}
	return nil
}
