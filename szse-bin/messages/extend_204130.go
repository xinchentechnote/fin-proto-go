// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// Extend204130 represents the packet structure.
type Extend204130 struct {
	MemberId                 string `json:"MemberID"`
	InvestorType             string `json:"InvestorType"`
	InvestorId               string `json:"InvestorID"`
	InvestorName             string `json:"InvestorName"`
	TraderCode               string `json:"TraderCode"`
	CounterpartyMemberId     string `json:"CounterpartyMemberID"`
	CounterpartyInvestorType string `json:"CounterpartyInvestorType"`
	CounterpartyInvestorId   string `json:"CounterpartyInvestorID"`
	CounterpartyInvestorName string `json:"CounterpartyInvestorName"`
	CounterpartyTraderCode   string `json:"CounterpartyTraderCode"`
	SecondaryOrderId         string `json:"SecondaryOrderID"`
	BidTransType             uint16 `json:"BidTransType"`
	BidExecInstType          uint16 `json:"BidExecInstType"`
	SettlType                uint16 `json:"SettlType"`
	SettlPeriod              uint8  `json:"SettlPeriod"`
	CashMargin               string `json:"CashMargin"`
	Memo                     string `json:"Memo"`
}

// NewExtend204130 creates a new instance of Extend204130.
func NewExtend204130() *Extend204130 {
	return &Extend204130{}
}

// String returns a string representation of the packet.
func (p *Extend204130) String() string {
	return fmt.Sprintf("Extend204130{MemberId: %v, InvestorType: %v, InvestorId: %v, InvestorName: %v, TraderCode: %v, CounterpartyMemberId: %v, CounterpartyInvestorType: %v, CounterpartyInvestorId: %v, CounterpartyInvestorName: %v, CounterpartyTraderCode: %v, SecondaryOrderId: %v, BidTransType: %v, BidExecInstType: %v, SettlType: %v, SettlPeriod: %v, CashMargin: %v, Memo: %v}", p.MemberId, p.InvestorType, p.InvestorId, p.InvestorName, p.TraderCode, p.CounterpartyMemberId, p.CounterpartyInvestorType, p.CounterpartyInvestorId, p.CounterpartyInvestorName, p.CounterpartyTraderCode, p.SecondaryOrderId, p.BidTransType, p.BidExecInstType, p.SettlType, p.SettlPeriod, p.CashMargin, p.Memo)
}

// Encode encodes the packet into a byte slice.
func (p *Extend204130) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteFixedString(buf, p.MemberId, 6); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.InvestorType, 2); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.InvestorId, 10); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.InvestorName, 120); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.TraderCode, 8); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.CounterpartyMemberId, 6); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.CounterpartyInvestorType, 2); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.CounterpartyInvestorId, 10); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.CounterpartyInvestorName, 120); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.CounterpartyTraderCode, 8); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.SecondaryOrderId, 16); err != nil {
		return err
	}
	if err := codec.WriteBasicType(buf, p.BidTransType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BidTransType", err)
	}
	if err := codec.WriteBasicType(buf, p.BidExecInstType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BidExecInstType", err)
	}
	if err := codec.WriteBasicType(buf, p.SettlType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SettlType", err)
	}
	if err := codec.WriteBasicType(buf, p.SettlPeriod); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SettlPeriod", err)
	}
	if err := codec.WriteFixedString(buf, p.CashMargin, 1); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.Memo, 160); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Extend204130) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadFixedString(buf, 6); err != nil {
		return err
	} else {
		p.MemberId = val
	}
	if val, err := codec.ReadFixedString(buf, 2); err != nil {
		return err
	} else {
		p.InvestorType = val
	}
	if val, err := codec.ReadFixedString(buf, 10); err != nil {
		return err
	} else {
		p.InvestorId = val
	}
	if val, err := codec.ReadFixedString(buf, 120); err != nil {
		return err
	} else {
		p.InvestorName = val
	}
	if val, err := codec.ReadFixedString(buf, 8); err != nil {
		return err
	} else {
		p.TraderCode = val
	}
	if val, err := codec.ReadFixedString(buf, 6); err != nil {
		return err
	} else {
		p.CounterpartyMemberId = val
	}
	if val, err := codec.ReadFixedString(buf, 2); err != nil {
		return err
	} else {
		p.CounterpartyInvestorType = val
	}
	if val, err := codec.ReadFixedString(buf, 10); err != nil {
		return err
	} else {
		p.CounterpartyInvestorId = val
	}
	if val, err := codec.ReadFixedString(buf, 120); err != nil {
		return err
	} else {
		p.CounterpartyInvestorName = val
	}
	if val, err := codec.ReadFixedString(buf, 8); err != nil {
		return err
	} else {
		p.CounterpartyTraderCode = val
	}
	if val, err := codec.ReadFixedString(buf, 16); err != nil {
		return err
	} else {
		p.SecondaryOrderId = val
	}
	if val, err := codec.ReadBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.BidTransType = val
	}
	if val, err := codec.ReadBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.BidExecInstType = val
	}
	if val, err := codec.ReadBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.SettlType = val
	}
	if val, err := codec.ReadBasicType[uint8](buf); err != nil {
		return err
	} else {
		p.SettlPeriod = val
	}
	if val, err := codec.ReadFixedString(buf, 1); err != nil {
		return err
	} else {
		p.CashMargin = val
	}
	if val, err := codec.ReadFixedString(buf, 160); err != nil {
		return err
	} else {
		p.Memo = val
	}
	return nil
}
