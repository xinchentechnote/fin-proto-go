// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// PlatformInfo represents the packet structure.
type PlatformInfo struct {
	PlatformId        uint16               `json:"PlatformID"`
	PlatformPartition []*PlatformPartition `json:"PlatformPartition"`
}

// NewPlatformInfo creates a new instance of PlatformInfo.
func NewPlatformInfo() *PlatformInfo {
	return &PlatformInfo{}
}

// String returns a string representation of the packet.
func (p *PlatformInfo) String() string {
	return fmt.Sprintf("PlatformInfo{PlatformId: %v, PlatformPartition: %v}", p.PlatformId, p.PlatformPartition)
}

// Encode encodes the packet into a byte slice.
func (p *PlatformInfo) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.PlatformId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PlatformID", err)
	}
	if err := codec.PutObjectList[uint32](buf, p.PlatformPartition); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *PlatformInfo) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.PlatformId = val
	}
	if val, err := codec.GetObjectList[uint32](buf, func() *PlatformPartition { return &PlatformPartition{} }); err != nil {
		return err
	} else {
		p.PlatformPartition = val
	}
	return nil
}
