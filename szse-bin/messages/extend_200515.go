// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// Extend200515 represents the packet structure.
type Extend200515 struct {
	ConfirmId  string `json:"ConfirmID"`
	CashMargin string `json:"CashMargin"`
}

// NewExtend200515 creates a new instance of Extend200515.
func NewExtend200515() *Extend200515 {
	return &Extend200515{}
}

// String returns a string representation of the packet.
func (p *Extend200515) String() string {
	return fmt.Sprintf("Extend200515{ConfirmId: %v, CashMargin: %v}", p.ConfirmId, p.CashMargin)
}

// Encode encodes the packet into a byte slice.
func (p *Extend200515) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.ConfirmId, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CashMargin, 1); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Extend200515) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.ConfirmId = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.CashMargin = val
	}
	return nil
}
