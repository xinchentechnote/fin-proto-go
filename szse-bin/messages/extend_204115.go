// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// Extend204115 represents the packet structure.
type Extend204115 struct {
	CashMargin               string `json:"CashMargin"`
	SettlType                uint16 `json:"SettlType"`
	SettlPeriod              uint8  `json:"SettlPeriod"`
	CounterpartyMemberId     string `json:"CounterpartyMemberID"`
	CounterpartyInvestorType string `json:"CounterpartyInvestorType"`
	CounterpartyInvestorId   string `json:"CounterpartyInvestorID"`
	CounterpartyInvestorName string `json:"CounterpartyInvestorName"`
	CounterpartyTraderCode   string `json:"CounterpartyTraderCode"`
}

// NewExtend204115 creates a new instance of Extend204115.
func NewExtend204115() *Extend204115 {
	return &Extend204115{}
}

// String returns a string representation of the packet.
func (p *Extend204115) String() string {
	return fmt.Sprintf("Extend204115{CashMargin: %v, SettlType: %v, SettlPeriod: %v, CounterpartyMemberId: %v, CounterpartyInvestorType: %v, CounterpartyInvestorId: %v, CounterpartyInvestorName: %v, CounterpartyTraderCode: %v}", p.CashMargin, p.SettlType, p.SettlPeriod, p.CounterpartyMemberId, p.CounterpartyInvestorType, p.CounterpartyInvestorId, p.CounterpartyInvestorName, p.CounterpartyTraderCode)
}

// Encode encodes the packet into a byte slice.
func (p *Extend204115) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.CashMargin, 1); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.SettlType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SettlType", err)
	}
	if err := codec.PutBasicType(buf, p.SettlPeriod); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SettlPeriod", err)
	}
	if err := codec.PutFixedString(buf, p.CounterpartyMemberId, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CounterpartyInvestorType, 2); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CounterpartyInvestorId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CounterpartyInvestorName, 120); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CounterpartyTraderCode, 8); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Extend204115) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.CashMargin = val
	}
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.SettlType = val
	}
	if val, err := codec.GetBasicType[uint8](buf); err != nil {
		return err
	} else {
		p.SettlPeriod = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.CounterpartyMemberId = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.CounterpartyInvestorType = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.CounterpartyInvestorId = val
	}
	if val, err := codec.GetFixedString(buf, 120); err != nil {
		return err
	} else {
		p.CounterpartyInvestorName = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.CounterpartyTraderCode = val
	}
	return nil
}
