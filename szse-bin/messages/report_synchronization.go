// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// ReportSynchronization represents the packet structure.
type ReportSynchronization struct {
	PartitionReport []*PartitionReport `json:"PartitionReport"`
}

// NewReportSynchronization creates a new instance of ReportSynchronization.
func NewReportSynchronization() *ReportSynchronization {
	return &ReportSynchronization{}
}

// String returns a string representation of the packet.
func (p *ReportSynchronization) String() string {
	return fmt.Sprintf("ReportSynchronization{PartitionReport: %v}", p.PartitionReport)
}

// Encode encodes the packet into a byte slice.
func (p *ReportSynchronization) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteObjectList[uint32](buf, p.PartitionReport); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ReportSynchronization) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadObjectList[uint32](buf, func() *PartitionReport { return &PartitionReport{} }); err != nil {
		return err
	} else {
		p.PartitionReport = val
	}
	return nil
}
