// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// Extend204715 represents the packet structure.
type Extend204715 struct {
	ExpirationDays uint16 `json:"ExpirationDays"`
	ExpirationType uint8  `json:"ExpirationType"`
	MaturityDate   uint32 `json:"MaturityDate"`
	ShareProperty  string `json:"ShareProperty"`
}

// NewExtend204715 creates a new instance of Extend204715.
func NewExtend204715() *Extend204715 {
	return &Extend204715{}
}

// String returns a string representation of the packet.
func (p *Extend204715) String() string {
	return fmt.Sprintf("Extend204715{ExpirationDays: %v, ExpirationType: %v, MaturityDate: %v, ShareProperty: %v}", p.ExpirationDays, p.ExpirationType, p.MaturityDate, p.ShareProperty)
}

// Encode encodes the packet into a byte slice.
func (p *Extend204715) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.ExpirationDays); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ExpirationDays", err)
	}
	if err := codec.PutBasicType(buf, p.ExpirationType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ExpirationType", err)
	}
	if err := codec.PutBasicType(buf, p.MaturityDate); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MaturityDate", err)
	}
	if err := codec.PutFixedString(buf, p.ShareProperty, 2); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Extend204715) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.ExpirationDays = val
	}
	if val, err := codec.GetBasicType[uint8](buf); err != nil {
		return err
	} else {
		p.ExpirationType = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MaturityDate = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.ShareProperty = val
	}
	return nil
}
