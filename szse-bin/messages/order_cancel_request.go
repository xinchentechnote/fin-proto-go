// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

// OrderCancelRequest represents the packet structure.
type OrderCancelRequest struct {
	ApplId           string `json:"ApplID"`
	SubmittingPbuid  string `json:"SubmittingPBUID"`
	SecurityId       string `json:"SecurityID"`
	SecurityIdsource string `json:"SecurityIDSource"`
	OwnerType        uint16 `json:"OwnerType"`
	ClearingFirm     string `json:"ClearingFirm"`
	TransactTime     int64  `json:"TransactTime"`
	UserInfo         string `json:"UserInfo"`
	ClOrdId          string `json:"ClOrdID"`
	OrigClOrdId      string `json:"OrigClOrdID"`
	Side             string `json:"Side"`
	OrderId          string `json:"OrderID"`
	OrderQty         int64  `json:"OrderQty"`
}

// NewOrderCancelRequest creates a new instance of OrderCancelRequest.
func NewOrderCancelRequest() *OrderCancelRequest {
	return &OrderCancelRequest{}
}

// String returns a string representation of the packet.
func (p *OrderCancelRequest) String() string {
	return fmt.Sprintf("OrderCancelRequest{ApplId: %v, SubmittingPbuid: %v, SecurityId: %v, SecurityIdsource: %v, OwnerType: %v, ClearingFirm: %v, TransactTime: %v, UserInfo: %v, ClOrdId: %v, OrigClOrdId: %v, Side: %v, OrderId: %v, OrderQty: %v}", p.ApplId, p.SubmittingPbuid, p.SecurityId, p.SecurityIdsource, p.OwnerType, p.ClearingFirm, p.TransactTime, p.UserInfo, p.ClOrdId, p.OrigClOrdId, p.Side, p.OrderId, p.OrderQty)
}

// Encode encodes the packet into a byte slice.
func (p *OrderCancelRequest) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.ApplId, 3); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SubmittingPbuid, 6); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityId, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityIdsource, 4); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OwnerType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OwnerType", err)
	}
	if err := codec.PutFixedString(buf, p.ClearingFirm, 2); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.TransactTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TransactTime", err)
	}
	if err := codec.PutFixedString(buf, p.UserInfo, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ClOrdId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrigClOrdId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.Side, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrderId, 16); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OrderQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrderQty", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *OrderCancelRequest) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 3); err != nil {
		return err
	} else {
		p.ApplId = val
	}
	if val, err := codec.GetFixedString(buf, 6); err != nil {
		return err
	} else {
		p.SubmittingPbuid = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.GetFixedString(buf, 4); err != nil {
		return err
	} else {
		p.SecurityIdsource = val
	}
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.OwnerType = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.ClearingFirm = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.TransactTime = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.UserInfo = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.OrigClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.Side = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.OrderId = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.OrderQty = val
	}
	return nil
}
