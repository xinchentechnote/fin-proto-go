// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// Extend203102 represents the packet structure.
type Extend203102 struct {
	InsufficientSecurityId     string `json:"InsufficientSecurityID"`
	NoSecurity                 uint32 `json:"NoSecurity"`
	UnderlyingSecurityId       string `json:"UnderlyingSecurityID"`
	UnderlyingSecurityIdsource string `json:"UnderlyingSecurityIDSource"`
	DeliveryQty                int64  `json:"DeliveryQty"`
}

// NewExtend203102 creates a new instance of Extend203102.
func NewExtend203102() *Extend203102 {
	return &Extend203102{}
}

// String returns a string representation of the packet.
func (p *Extend203102) String() string {
	return fmt.Sprintf("Extend203102{InsufficientSecurityId: %v, NoSecurity: %v, UnderlyingSecurityId: %v, UnderlyingSecurityIdsource: %v, DeliveryQty: %v}", p.InsufficientSecurityId, p.NoSecurity, p.UnderlyingSecurityId, p.UnderlyingSecurityIdsource, p.DeliveryQty)
}

// Encode encodes the packet into a byte slice.
func (p *Extend203102) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteFixedString(buf, p.InsufficientSecurityId, 8); err != nil {
		return err
	}
	if err := codec.WriteBasicType(buf, p.NoSecurity); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "NoSecurity", err)
	}
	if err := codec.WriteFixedString(buf, p.UnderlyingSecurityId, 8); err != nil {
		return err
	}
	if err := codec.WriteFixedString(buf, p.UnderlyingSecurityIdsource, 4); err != nil {
		return err
	}
	if err := codec.WriteBasicType(buf, p.DeliveryQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "DeliveryQty", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Extend203102) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadFixedString(buf, 8); err != nil {
		return err
	} else {
		p.InsufficientSecurityId = val
	}
	if val, err := codec.ReadBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.NoSecurity = val
	}
	if val, err := codec.ReadFixedString(buf, 8); err != nil {
		return err
	} else {
		p.UnderlyingSecurityId = val
	}
	if val, err := codec.ReadFixedString(buf, 4); err != nil {
		return err
	} else {
		p.UnderlyingSecurityIdsource = val
	}
	if val, err := codec.ReadBasicType[int64](buf); err != nil {
		return err
	} else {
		p.DeliveryQty = val
	}
	return nil
}
