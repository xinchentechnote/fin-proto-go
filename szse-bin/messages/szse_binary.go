// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
	RegistrySzseBinaryMsgTypeFactory(1, func() codec.BinaryCodec { return &Logon{} })
	RegistrySzseBinaryMsgTypeFactory(2, func() codec.BinaryCodec { return &Logout{} })
	RegistrySzseBinaryMsgTypeFactory(3, func() codec.BinaryCodec { return &Heartbeat{} })
	RegistrySzseBinaryMsgTypeFactory(4, func() codec.BinaryCodec { return &BusinessReject{} })
	RegistrySzseBinaryMsgTypeFactory(5, func() codec.BinaryCodec { return &ReportSynchronization{} })
	RegistrySzseBinaryMsgTypeFactory(6, func() codec.BinaryCodec { return &PlatformStateInfo{} })
	RegistrySzseBinaryMsgTypeFactory(7, func() codec.BinaryCodec { return &ReportFinished{} })
	RegistrySzseBinaryMsgTypeFactory(9, func() codec.BinaryCodec { return &PlatformPartition{} })
	RegistrySzseBinaryMsgTypeFactory(10, func() codec.BinaryCodec { return &TradingSessionStatus{} })
	RegistrySzseBinaryMsgTypeFactory(100101, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(100201, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(100301, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(100401, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(100501, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(100601, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(100701, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(101201, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(101301, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(101401, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(101501, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(101601, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(101701, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(101801, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(101901, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(102301, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(102701, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(102801, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(102901, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(103101, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(106301, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(103301, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(103501, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(103701, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(104101, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(104128, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(104701, func() codec.BinaryCodec { return &NewOrder{} })
	RegistrySzseBinaryMsgTypeFactory(200102, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(200202, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(200302, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(200402, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(200502, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(200602, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(200702, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(201202, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(201302, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(201402, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(201502, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(201602, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(201702, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(201802, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(201902, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(202202, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(202302, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(202702, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(202802, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(202902, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(203102, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(206302, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(203302, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(203502, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(203702, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(204102, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(204129, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(204702, func() codec.BinaryCodec { return &ExecutionConfirm{} })
	RegistrySzseBinaryMsgTypeFactory(200115, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(200215, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(200315, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(200415, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(200515, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(200615, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(200715, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(206315, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(203715, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(204115, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(204130, func() codec.BinaryCodec { return &ExecutionReport{} })
	RegistrySzseBinaryMsgTypeFactory(190007, func() codec.BinaryCodec { return &OrderCancelRequest{} })
	RegistrySzseBinaryMsgTypeFactory(290008, func() codec.BinaryCodec { return &CancelReject{} })
}

var szseBinaryMsgTypeFactoryCache = map[uint32]func() codec.BinaryCodec{}

func RegistrySzseBinaryMsgTypeFactory(msgType uint32, factory func() codec.BinaryCodec) {
	szseBinaryMsgTypeFactoryCache[msgType] = factory
}

func NewSzseBinaryMessageByMsgType(key uint32) (codec.BinaryCodec, error) {
	if factory, ok := szseBinaryMsgTypeFactoryCache[key]; ok {
		return factory(), nil
	}
	return nil, fmt.Errorf("unknown message type")
}

// SzseBinary represents the packet structure.
type SzseBinary struct {
	MsgType    uint32            `json:"MsgType"`
	BodyLength uint32            `json:"BodyLength"`
	Body       codec.BinaryCodec `json:"Body"`
	Checksum   int32             `json:"Checksum"`
}

// NewSzseBinary creates a new instance of SzseBinary.
func NewSzseBinary() *SzseBinary {
	return &SzseBinary{}
}

// String returns a string representation of the packet.
func (p *SzseBinary) String() string {
	return fmt.Sprintf("SzseBinary{MsgType: %v, BodyLength: %v, Body: %v, Checksum: %v}", p.MsgType, p.BodyLength, p.Body, p.Checksum)
}

// Encode encodes the packet into a byte slice.
func (p *SzseBinary) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.MsgType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgType", err)
	}
	bodyPos := buf.Len()
	if err := codec.PutBasicType(buf, uint32(0)); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BodyLength", err)
	}
	bodyStart := buf.Len()
	if p.Body != nil {
		if err := p.Body.Encode(buf); err != nil {
			return err
		}
	}
	bodyEnd := buf.Len()
	p.BodyLength = uint32(bodyEnd - bodyStart)
	binary.BigEndian.PutUint32(buf.Bytes()[bodyPos:bodyPos+4], p.BodyLength)
	if checksumService, ok := codec.Get("SZSE_BIN"); ok {
		p.Checksum = checksumService.(codec.ChecksumService[*bytes.Buffer, int32]).Calc(buf)
	}
	if err := codec.PutBasicType(buf, p.Checksum); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Checksum", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *SzseBinary) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MsgType = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.BodyLength = val
	}
	if val, err := NewSzseBinaryMessageByMsgType(p.MsgType); err != nil {
		return err
	} else {
		p.Body = val
	}
	if err := p.Body.Decode(buf); err != nil {
		return err
	}
	if val, err := codec.GetBasicType[int32](buf); err != nil {
		return err
	} else {
		p.Checksum = val
	}
	return nil
}
