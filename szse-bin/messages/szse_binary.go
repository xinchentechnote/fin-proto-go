// Code generated by fin-protoc. DO NOT EDIT.
package szse_bin

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// SzseBinary represents the packet structure.
type SzseBinary struct {
	MsgType    uint32            `json:"MsgType"`
	BodyLength uint32            `json:"BodyLength"`
	Body       codec.BinaryCodec `json:"Body"`
	Checksum   int32             `json:"Checksum"`
}

// NewSzseBinary creates a new instance of SzseBinary.
func NewSzseBinary() *SzseBinary {
	return &SzseBinary{}
}

// String returns a string representation of the packet.
func (p *SzseBinary) String() string {
	return fmt.Sprintf("SzseBinary{MsgType: %v, BodyLength: %v, Body: %v, Checksum: %v}", p.MsgType, p.BodyLength, p.Body, p.Checksum)
}

// Encode encodes the packet into a byte slice.
func (p *SzseBinary) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.MsgType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgType", err)
	}
	var BodyBuf bytes.Buffer
	if err := p.Body.Encode(&BodyBuf); err != nil {
		return err
	}
	p.BodyLength = uint32(BodyBuf.Available())
	if err := codec.PutBasicType(buf, p.BodyLength); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BodyLength", err)
	}
	if err := binary.Write(buf, binary.BigEndian, BodyBuf.Bytes()); err != nil {
		return err
	}
	if checksumService, ok := codec.Get("SZSE_BIN"); ok {
		p.Checksum = checksumService.(codec.ChecksumService[*bytes.Buffer, int32]).Calc(buf)
	}
	if err := codec.PutBasicType(buf, p.Checksum); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Checksum", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *SzseBinary) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MsgType = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.BodyLength = val
	}
	switch p.MsgType {
	case 1:
		p.Body = &Logon{}
	case 2:
		p.Body = &Logout{}
	case 3:
		p.Body = &Heartbeat{}
	case 4:
		p.Body = &BusinessReject{}
	case 5:
		p.Body = &ReportSynchronization{}
	case 6:
		p.Body = &PlatformStateInfo{}
	case 7:
		p.Body = &ReportFinished{}
	case 9:
		p.Body = &PlatformPartition{}
	case 10:
		p.Body = &TradingSessionStatus{}
	case 100101:
		p.Body = &NewOrder{}
	case 100201:
		p.Body = &NewOrder{}
	case 100301:
		p.Body = &NewOrder{}
	case 100401:
		p.Body = &NewOrder{}
	case 100501:
		p.Body = &NewOrder{}
	case 100601:
		p.Body = &NewOrder{}
	case 100701:
		p.Body = &NewOrder{}
	case 101201:
		p.Body = &NewOrder{}
	case 101301:
		p.Body = &NewOrder{}
	case 101401:
		p.Body = &NewOrder{}
	case 101501:
		p.Body = &NewOrder{}
	case 101601:
		p.Body = &NewOrder{}
	case 101701:
		p.Body = &NewOrder{}
	case 101801:
		p.Body = &NewOrder{}
	case 101901:
		p.Body = &NewOrder{}
	case 102301:
		p.Body = &NewOrder{}
	case 102701:
		p.Body = &NewOrder{}
	case 102801:
		p.Body = &NewOrder{}
	case 102901:
		p.Body = &NewOrder{}
	case 103101:
		p.Body = &NewOrder{}
	case 106301:
		p.Body = &NewOrder{}
	case 103301:
		p.Body = &NewOrder{}
	case 103501:
		p.Body = &NewOrder{}
	case 103701:
		p.Body = &NewOrder{}
	case 104101:
		p.Body = &NewOrder{}
	case 104128:
		p.Body = &NewOrder{}
	case 104701:
		p.Body = &NewOrder{}
	case 200102:
		p.Body = &ExecutionConfirm{}
	case 200202:
		p.Body = &ExecutionConfirm{}
	case 200302:
		p.Body = &ExecutionConfirm{}
	case 200402:
		p.Body = &ExecutionConfirm{}
	case 200502:
		p.Body = &ExecutionConfirm{}
	case 200602:
		p.Body = &ExecutionConfirm{}
	case 200702:
		p.Body = &ExecutionConfirm{}
	case 201202:
		p.Body = &ExecutionConfirm{}
	case 201302:
		p.Body = &ExecutionConfirm{}
	case 201402:
		p.Body = &ExecutionConfirm{}
	case 201502:
		p.Body = &ExecutionConfirm{}
	case 201602:
		p.Body = &ExecutionConfirm{}
	case 201702:
		p.Body = &ExecutionConfirm{}
	case 201802:
		p.Body = &ExecutionConfirm{}
	case 201902:
		p.Body = &ExecutionConfirm{}
	case 202202:
		p.Body = &ExecutionConfirm{}
	case 202302:
		p.Body = &ExecutionConfirm{}
	case 202702:
		p.Body = &ExecutionConfirm{}
	case 202802:
		p.Body = &ExecutionConfirm{}
	case 202902:
		p.Body = &ExecutionConfirm{}
	case 203102:
		p.Body = &ExecutionConfirm{}
	case 206302:
		p.Body = &ExecutionConfirm{}
	case 203302:
		p.Body = &ExecutionConfirm{}
	case 203502:
		p.Body = &ExecutionConfirm{}
	case 203702:
		p.Body = &ExecutionConfirm{}
	case 204102:
		p.Body = &ExecutionConfirm{}
	case 204129:
		p.Body = &ExecutionConfirm{}
	case 204702:
		p.Body = &ExecutionConfirm{}
	case 200115:
		p.Body = &ExecutionReport{}
	case 200215:
		p.Body = &ExecutionReport{}
	case 200315:
		p.Body = &ExecutionReport{}
	case 200415:
		p.Body = &ExecutionReport{}
	case 200515:
		p.Body = &ExecutionReport{}
	case 200615:
		p.Body = &ExecutionReport{}
	case 200715:
		p.Body = &ExecutionReport{}
	case 206315:
		p.Body = &ExecutionReport{}
	case 203715:
		p.Body = &ExecutionReport{}
	case 204115:
		p.Body = &ExecutionReport{}
	case 204130:
		p.Body = &ExecutionReport{}
	case 190007:
		p.Body = &OrderCancelRequest{}
	case 290008:
		p.Body = &CancelReject{}
	default:
		return fmt.Errorf("unsupported MsgType: %v", p.MsgType)
	}
	if err := p.Body.Decode(buf); err != nil {
		return err
	}
	if val, err := codec.GetBasicType[int32](buf); err != nil {
		return err
	} else {
		p.Checksum = val
	}
	return nil
}
