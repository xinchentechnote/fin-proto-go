// Code generated by fin-protoc. DO NOT EDIT.
package sample_bin

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
	RegistryRootPacketMsgTypeFactory(1, func() codec.BinaryCodec { return &BasicPacket{} })
	RegistryRootPacketMsgTypeFactory(2, func() codec.BinaryCodec { return &StringPacket{} })
	RegistryRootPacketMsgTypeFactory(3, func() codec.BinaryCodec { return &NestedPacket{} })
	RegistryRootPacketMsgTypeFactory(4, func() codec.BinaryCodec { return &EmptyPacket{} })
}

var rootPacketMsgTypeFactoryCache = map[uint16]func() codec.BinaryCodec{}

func RegistryRootPacketMsgTypeFactory(msgType uint16, factory func() codec.BinaryCodec) {
	rootPacketMsgTypeFactoryCache[msgType] = factory
}

func NewRootPacketMessageByMsgType(key uint16) (codec.BinaryCodec, error) {
	if factory, ok := rootPacketMsgTypeFactoryCache[key]; ok {
		return factory(), nil
	}
	return nil, fmt.Errorf("unknown message type")
}

// RootPacket represents the packet structure.
type RootPacket struct {
	MsgType    uint16            `json:"MsgType"`
	PayloadLen uint32            `json:"PayloadLen"`
	Payload    codec.BinaryCodec `json:"Payload"`
	Checksum   uint32            `json:"Checksum"`
}

// NewRootPacket creates a new instance of RootPacket.
func NewRootPacket() *RootPacket {
	return &RootPacket{}
}

// String returns a string representation of the packet.
func (p *RootPacket) String() string {
	return fmt.Sprintf("RootPacket{MsgType: %v, PayloadLen: %v, Payload: %v, Checksum: %v}", p.MsgType, p.PayloadLen, p.Payload, p.Checksum)
}

// Encode encodes the packet into a byte slice.
func (p *RootPacket) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.WriteBasicTypeLE(buf, p.MsgType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgType", err)
	}
	payloadPos := buf.Len()
	if err := codec.WriteBasicTypeLE(buf, uint32(0)); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PayloadLen", err)
	}
	payloadStart := buf.Len()
	if p.Payload != nil {
		if err := p.Payload.Encode(buf); err != nil {
			return err
		}
	}
	payloadEnd := buf.Len()
	p.PayloadLen = uint32(payloadEnd - payloadStart)
	binary.LittleEndian.PutUint32(buf.Bytes()[payloadPos:payloadPos+4], p.PayloadLen)
	if checksumService, ok := codec.Get("CRC32"); ok {
		p.Checksum = checksumService.(codec.ChecksumService[*bytes.Buffer, uint32]).Calc(buf)
	}
	if err := codec.WriteBasicTypeLE(buf, p.Checksum); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Checksum", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *RootPacket) Decode(buf *bytes.Buffer) error {
	if val, err := codec.ReadBasicTypeLE[uint16](buf); err != nil {
		return err
	} else {
		p.MsgType = val
	}
	if val, err := codec.ReadBasicTypeLE[uint32](buf); err != nil {
		return err
	} else {
		p.PayloadLen = val
	}
	if val, err := NewRootPacketMessageByMsgType(p.MsgType); err != nil {
		return err
	} else {
		p.Payload = val
	}
	if err := p.Payload.Decode(buf); err != nil {
		return err
	}
	if val, err := codec.ReadBasicTypeLE[uint32](buf); err != nil {
		return err
	} else {
		p.Checksum = val
	}
	return nil
}
