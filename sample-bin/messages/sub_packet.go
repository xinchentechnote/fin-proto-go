// Code generated by fin-protoc. DO NOT EDIT.
package sample_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// SubPacket represents the packet structure.
type SubPacket struct {
	FieldU32     uint32  `json:"fieldU32"`
	FieldI16List []int16 `json:"fieldI16List"`
}

// NewSubPacket creates a new instance of SubPacket.
func NewSubPacket() *SubPacket {
	return &SubPacket{}
}

// String returns a string representation of the packet.
func (p *SubPacket) String() string {
	return fmt.Sprintf("SubPacket{FieldU32: %v, FieldI16List: %v}", p.FieldU32, p.FieldI16List)
}

// Encode encodes the packet into a byte slice.
func (p *SubPacket) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicTypeLE(buf, p.FieldU32); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldU32", err)
	}
	if err := codec.PutBasicTypeListLE[uint16](buf, p.FieldI16List); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "fieldI16List", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *SubPacket) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicTypeLE[uint32](buf); err != nil {
		return err
	} else {
		p.FieldU32 = val
	}
	if val, err := codec.GetBasicTypeListLE[uint16, int16](buf); err != nil {
		return err
	} else {
		p.FieldI16List = val
	}
	return nil
}
