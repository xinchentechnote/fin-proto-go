// Code generated by fin-protoc. DO NOT EDIT.
package sse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// SubExecRptSyncRsp represents the packet structure.
type SubExecRptSyncRsp struct {
	Pbu              string `json:"Pbu"`
	SetId            uint32 `json:"SetID"`
	BeginReportIndex uint64 `json:"BeginReportIndex"`
	EndReportIndex   uint64 `json:"EndReportIndex"`
	RejReason        uint32 `json:"RejReason"`
	Text             string `json:"Text"`
}

// NewSubExecRptSyncRsp creates a new instance of SubExecRptSyncRsp.
func NewSubExecRptSyncRsp() *SubExecRptSyncRsp {
	return &SubExecRptSyncRsp{}
}

// String returns a string representation of the packet.
func (p *SubExecRptSyncRsp) String() string {
	return fmt.Sprintf("SubExecRptSyncRsp{Pbu: %v, SetId: %v, BeginReportIndex: %v, EndReportIndex: %v, RejReason: %v, Text: %v}", p.Pbu, p.SetId, p.BeginReportIndex, p.EndReportIndex, p.RejReason, p.Text)
}

// Encode encodes the packet into a byte slice.
func (p *SubExecRptSyncRsp) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.Pbu, 8); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.SetId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SetID", err)
	}
	if err := codec.PutBasicType(buf, p.BeginReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BeginReportIndex", err)
	}
	if err := codec.PutBasicType(buf, p.EndReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "EndReportIndex", err)
	}
	if err := codec.PutBasicType(buf, p.RejReason); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "RejReason", err)
	}
	if err := codec.PutFixedString(buf, p.Text, 64); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *SubExecRptSyncRsp) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.Pbu = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.SetId = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.BeginReportIndex = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.EndReportIndex = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.RejReason = val
	}
	if val, err := codec.GetFixedString(buf, 64); err != nil {
		return err
	} else {
		p.Text = val
	}
	return nil
}

// ExecRptSyncRsp represents the packet structure.
type ExecRptSyncRsp struct {
	SubExecRptSyncRsp []*SubExecRptSyncRsp `json:"SubExecRptSyncRsp"`
}

// NewExecRptSyncRsp creates a new instance of ExecRptSyncRsp.
func NewExecRptSyncRsp() *ExecRptSyncRsp {
	return &ExecRptSyncRsp{}
}

// String returns a string representation of the packet.
func (p *ExecRptSyncRsp) String() string {
	return fmt.Sprintf("ExecRptSyncRsp{SubExecRptSyncRsp: %v}", p.SubExecRptSyncRsp)
}

// Encode encodes the packet into a byte slice.
func (p *ExecRptSyncRsp) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutObjectList[uint16](buf, p.SubExecRptSyncRsp); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ExecRptSyncRsp) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetObjectList[uint16](buf, func() *SubExecRptSyncRsp { return &SubExecRptSyncRsp{} }); err != nil {
		return err
	} else {
		p.SubExecRptSyncRsp = val
	}
	return nil
}
