// Code generated by fin-protoc. DO NOT EDIT.
package sse_bin

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// SseBinary represents the packet structure.
type SseBinary struct {
	MsgType    uint32            `json:"MsgType"`
	MsgSeqNum  uint64            `json:"MsgSeqNum"`
	MsgBodyLen uint32            `json:"MsgBodyLen"`
	Body       codec.BinaryCodec `json:"Body"`
	Checksum   uint32            `json:"Checksum"`
}

// NewSseBinary creates a new instance of SseBinary.
func NewSseBinary() *SseBinary {
	return &SseBinary{}
}

// String returns a string representation of the packet.
func (p *SseBinary) String() string {
	return fmt.Sprintf("SseBinary{MsgType: %v, MsgSeqNum: %v, MsgBodyLen: %v, Body: %v, Checksum: %v}", p.MsgType, p.MsgSeqNum, p.MsgBodyLen, p.Body, p.Checksum)
}

// Encode encodes the packet into a byte slice.
func (p *SseBinary) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.MsgType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgType", err)
	}
	if err := codec.PutBasicType(buf, p.MsgSeqNum); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgSeqNum", err)
	}
	var BodyBuf bytes.Buffer
	if err := p.Body.Encode(&BodyBuf); err != nil {
		return err
	}
	p.MsgBodyLen = uint32(BodyBuf.Available())
	if err := codec.PutBasicType(buf, p.MsgBodyLen); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgBodyLen", err)
	}
	if err := binary.Write(buf, binary.BigEndian, BodyBuf.Bytes()); err != nil {
		return err
	}
	if checksumService, ok := codec.Get("SSE_BIN"); ok {
		p.Checksum = checksumService.(codec.ChecksumService[*bytes.Buffer, uint32]).Calc(buf)
	}
	if err := codec.PutBasicType(buf, p.Checksum); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Checksum", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *SseBinary) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MsgType = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.MsgSeqNum = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MsgBodyLen = val
	}
	switch p.MsgType {
	case 33:
		p.Body = &Heartbeat{}
	case 40:
		p.Body = &Logon{}
	case 41:
		p.Body = &Logout{}
	case 58:
		p.Body = &NewOrderSingle{}
	case 61:
		p.Body = &OrderCancel{}
	case 32:
		p.Body = &Confirm{}
	case 59:
		p.Body = &CancelReject{}
	case 103:
		p.Body = &Report{}
	case 204:
		p.Body = &OrderReject{}
	case 209:
		p.Body = &PlatformState{}
	case 208:
		p.Body = &ExecRptInfo{}
	case 206:
		p.Body = &ExecRptSync{}
	case 207:
		p.Body = &ExecRptSyncRsp{}
	case 210:
		p.Body = &ExecRptEndOfStream{}
	default:
		return fmt.Errorf("unsupported MsgType: %v", p.MsgType)
	}
	if err := p.Body.Decode(buf); err != nil {
		return err
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.Checksum = val
	}
	return nil
}
