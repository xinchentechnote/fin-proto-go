// Code generated by fin-protoc. DO NOT EDIT.
package sse_bin

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
	RegistryMsgTypeFactory(33, func() codec.BinaryCodec { return &Heartbeat{} })
	RegistryMsgTypeFactory(40, func() codec.BinaryCodec { return &Logon{} })
	RegistryMsgTypeFactory(41, func() codec.BinaryCodec { return &Logout{} })
	RegistryMsgTypeFactory(58, func() codec.BinaryCodec { return &NewOrderSingle{} })
	RegistryMsgTypeFactory(61, func() codec.BinaryCodec { return &OrderCancel{} })
	RegistryMsgTypeFactory(32, func() codec.BinaryCodec { return &Confirm{} })
	RegistryMsgTypeFactory(59, func() codec.BinaryCodec { return &CancelReject{} })
	RegistryMsgTypeFactory(103, func() codec.BinaryCodec { return &Report{} })
	RegistryMsgTypeFactory(204, func() codec.BinaryCodec { return &OrderReject{} })
	RegistryMsgTypeFactory(209, func() codec.BinaryCodec { return &PlatformState{} })
	RegistryMsgTypeFactory(208, func() codec.BinaryCodec { return &ExecRptInfo{} })
	RegistryMsgTypeFactory(206, func() codec.BinaryCodec { return &ExecRptSync{} })
	RegistryMsgTypeFactory(207, func() codec.BinaryCodec { return &ExecRptSyncRsp{} })
	RegistryMsgTypeFactory(210, func() codec.BinaryCodec { return &ExecRptEndOfStream{} })
}

var msgTypeFactoryCache = map[uint32]func() codec.BinaryCodec{}

func RegistryMsgTypeFactory(msgType uint32, factory func() codec.BinaryCodec) {
	msgTypeFactoryCache[msgType] = factory
}

func NewMessageByMsgType(key uint32) (codec.BinaryCodec, error) {
	if factory, ok := msgTypeFactoryCache[key]; ok {
		return factory(), nil
	}
	return nil, fmt.Errorf("unknown message type")
}

// SseBinary represents the packet structure.
type SseBinary struct {
	MsgType    uint32            `json:"MsgType"`
	MsgSeqNum  uint64            `json:"MsgSeqNum"`
	MsgBodyLen uint32            `json:"MsgBodyLen"`
	Body       codec.BinaryCodec `json:"Body"`
	Checksum   uint32            `json:"Checksum"`
}

// NewSseBinary creates a new instance of SseBinary.
func NewSseBinary() *SseBinary {
	return &SseBinary{}
}

// String returns a string representation of the packet.
func (p *SseBinary) String() string {
	return fmt.Sprintf("SseBinary{MsgType: %v, MsgSeqNum: %v, MsgBodyLen: %v, Body: %v, Checksum: %v}", p.MsgType, p.MsgSeqNum, p.MsgBodyLen, p.Body, p.Checksum)
}

// Encode encodes the packet into a byte slice.
func (p *SseBinary) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.MsgType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgType", err)
	}
	if err := codec.PutBasicType(buf, p.MsgSeqNum); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgSeqNum", err)
	}
	var BodyBuf bytes.Buffer
	if err := p.Body.Encode(&BodyBuf); err != nil {
		return err
	}
	p.MsgBodyLen = uint32(BodyBuf.Len())
	if err := codec.PutBasicType(buf, p.MsgBodyLen); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "MsgBodyLen", err)
	}
	if err := binary.Write(buf, binary.BigEndian, BodyBuf.Bytes()); err != nil {
		return err
	}
	if checksumService, ok := codec.Get("SSE_BIN"); ok {
		p.Checksum = checksumService.(codec.ChecksumService[*bytes.Buffer, uint32]).Calc(buf)
	}
	if err := codec.PutBasicType(buf, p.Checksum); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Checksum", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *SseBinary) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MsgType = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.MsgSeqNum = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.MsgBodyLen = val
	}
	if val, err := NewMessageByMsgType(p.MsgType); err != nil {
		return err
	} else {
		p.Body = val
	}
	if err := p.Body.Decode(buf); err != nil {
		return err
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.Checksum = val
	}
	return nil
}
