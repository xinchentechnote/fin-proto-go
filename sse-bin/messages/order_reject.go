// Code generated by fin-protoc. DO NOT EDIT.
package sse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// OrderReject represents the packet structure.
type OrderReject struct {
	BizId        uint32 `json:"BizID"`
	BizPbu       string `json:"BizPbu"`
	ClOrdId      string `json:"ClOrdID"`
	SecurityId   string `json:"SecurityID"`
	OrdRejReason uint32 `json:"OrdRejReason"`
	TradeDate    uint32 `json:"TradeDate"`
	TransactTime uint64 `json:"TransactTime"`
	UserInfo     string `json:"UserInfo"`
}

// NewOrderReject creates a new instance of OrderReject.
func NewOrderReject() *OrderReject {
	return &OrderReject{}
}

// String returns a string representation of the packet.
func (p *OrderReject) String() string {
	return fmt.Sprintf("OrderReject{BizId: %v, BizPbu: %v, ClOrdId: %v, SecurityId: %v, OrdRejReason: %v, TradeDate: %v, TransactTime: %v, UserInfo: %v}", p.BizId, p.BizPbu, p.ClOrdId, p.SecurityId, p.OrdRejReason, p.TradeDate, p.TransactTime, p.UserInfo)
}

// Encode encodes the packet into a byte slice.
func (p *OrderReject) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.BizId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BizID", err)
	}
	if err := codec.PutFixedString(buf, p.BizPbu, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ClOrdId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityId, 12); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OrdRejReason); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrdRejReason", err)
	}
	if err := codec.PutBasicType(buf, p.TradeDate); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TradeDate", err)
	}
	if err := codec.PutBasicType(buf, p.TransactTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TransactTime", err)
	}
	if err := codec.PutFixedString(buf, p.UserInfo, 32); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *OrderReject) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.BizId = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.BizPbu = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 12); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.OrdRejReason = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.TradeDate = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.TransactTime = val
	}
	if val, err := codec.GetFixedString(buf, 32); err != nil {
		return err
	} else {
		p.UserInfo = val
	}
	return nil
}
