// Code generated by fin-protoc. DO NOT EDIT.
package sse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// Report represents the packet structure.
type Report struct {
	Pbu           string `json:"Pbu"`
	SetId         uint32 `json:"SetID"`
	ReportIndex   uint64 `json:"ReportIndex"`
	BizId         uint32 `json:"BizID"`
	ExecType      string `json:"ExecType"`
	BizPbu        string `json:"BizPbu"`
	ClOrdId       string `json:"ClOrdID"`
	SecurityId    string `json:"SecurityID"`
	Account       string `json:"Account"`
	OwnerType     uint8  `json:"OwnerType"`
	Side          string `json:"Side"`
	Price         int64  `json:"Price"`
	OrderQty      int64  `json:"OrderQty"`
	LeavesQty     int64  `json:"LeavesQty"`
	CxlQty        int64  `json:"CxlQty"`
	OrdType       string `json:"OrdType"`
	TimeInForce   string `json:"TimeInForce"`
	OrdStatus     string `json:"OrdStatus"`
	CreditTag     string `json:"CreditTag"`
	OrigClOrdId   string `json:"OrigClOrdID"`
	ClearingFirm  string `json:"ClearingFirm"`
	BranchId      string `json:"BranchID"`
	OrdRejReason  uint32 `json:"OrdRejReason"`
	OrdCnfmId     string `json:"OrdCnfmID"`
	OrigOrdCnfmId string `json:"OrigOrdCnfmID"`
	TradeDate     uint32 `json:"TradeDate"`
	TransactTime  uint64 `json:"TransactTime"`
	UserInfo      string `json:"UserInfo"`
}

// NewReport creates a new instance of Report.
func NewReport() *Report {
	return &Report{}
}

// String returns a string representation of the packet.
func (p *Report) String() string {
	return fmt.Sprintf("Report{Pbu: %v, SetId: %v, ReportIndex: %v, BizId: %v, ExecType: %v, BizPbu: %v, ClOrdId: %v, SecurityId: %v, Account: %v, OwnerType: %v, Side: %v, Price: %v, OrderQty: %v, LeavesQty: %v, CxlQty: %v, OrdType: %v, TimeInForce: %v, OrdStatus: %v, CreditTag: %v, OrigClOrdId: %v, ClearingFirm: %v, BranchId: %v, OrdRejReason: %v, OrdCnfmId: %v, OrigOrdCnfmId: %v, TradeDate: %v, TransactTime: %v, UserInfo: %v}", p.Pbu, p.SetId, p.ReportIndex, p.BizId, p.ExecType, p.BizPbu, p.ClOrdId, p.SecurityId, p.Account, p.OwnerType, p.Side, p.Price, p.OrderQty, p.LeavesQty, p.CxlQty, p.OrdType, p.TimeInForce, p.OrdStatus, p.CreditTag, p.OrigClOrdId, p.ClearingFirm, p.BranchId, p.OrdRejReason, p.OrdCnfmId, p.OrigOrdCnfmId, p.TradeDate, p.TransactTime, p.UserInfo)
}

// Encode encodes the packet into a byte slice.
func (p *Report) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.Pbu, 8); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.SetId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SetID", err)
	}
	if err := codec.PutBasicType(buf, p.ReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "ReportIndex", err)
	}
	if err := codec.PutBasicType(buf, p.BizId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BizID", err)
	}
	if err := codec.PutFixedString(buf, p.ExecType, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.BizPbu, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ClOrdId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.SecurityId, 12); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.Account, 13); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OwnerType); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OwnerType", err)
	}
	if err := codec.PutFixedString(buf, p.Side, 1); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.Price); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "Price", err)
	}
	if err := codec.PutBasicType(buf, p.OrderQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrderQty", err)
	}
	if err := codec.PutBasicType(buf, p.LeavesQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "LeavesQty", err)
	}
	if err := codec.PutBasicType(buf, p.CxlQty); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "CxlQty", err)
	}
	if err := codec.PutFixedString(buf, p.OrdType, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.TimeInForce, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrdStatus, 1); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.CreditTag, 2); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrigClOrdId, 10); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.ClearingFirm, 8); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.BranchId, 8); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.OrdRejReason); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "OrdRejReason", err)
	}
	if err := codec.PutFixedString(buf, p.OrdCnfmId, 16); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.OrigOrdCnfmId, 16); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.TradeDate); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TradeDate", err)
	}
	if err := codec.PutBasicType(buf, p.TransactTime); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TransactTime", err)
	}
	if err := codec.PutFixedString(buf, p.UserInfo, 32); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Report) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.Pbu = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.SetId = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.ReportIndex = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.BizId = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.ExecType = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.BizPbu = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.ClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 12); err != nil {
		return err
	} else {
		p.SecurityId = val
	}
	if val, err := codec.GetFixedString(buf, 13); err != nil {
		return err
	} else {
		p.Account = val
	}
	if val, err := codec.GetBasicType[uint8](buf); err != nil {
		return err
	} else {
		p.OwnerType = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.Side = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.Price = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.OrderQty = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.LeavesQty = val
	}
	if val, err := codec.GetBasicType[int64](buf); err != nil {
		return err
	} else {
		p.CxlQty = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.OrdType = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.TimeInForce = val
	}
	if val, err := codec.GetFixedString(buf, 1); err != nil {
		return err
	} else {
		p.OrdStatus = val
	}
	if val, err := codec.GetFixedString(buf, 2); err != nil {
		return err
	} else {
		p.CreditTag = val
	}
	if val, err := codec.GetFixedString(buf, 10); err != nil {
		return err
	} else {
		p.OrigClOrdId = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.ClearingFirm = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.BranchId = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.OrdRejReason = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.OrdCnfmId = val
	}
	if val, err := codec.GetFixedString(buf, 16); err != nil {
		return err
	} else {
		p.OrigOrdCnfmId = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.TradeDate = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.TransactTime = val
	}
	if val, err := codec.GetFixedString(buf, 32); err != nil {
		return err
	} else {
		p.UserInfo = val
	}
	return nil
}
