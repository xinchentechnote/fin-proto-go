// Code generated by fin-protoc. DO NOT EDIT.
package sse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/codec"
)

func init() {
}

// ExecRptInfo represents the packet structure.
type ExecRptInfo struct {
	PlatformId uint16   `json:"PlatformID"`
	Pbu        []string `json:"Pbu"`
	SetId      []uint32 `json:"SetID"`
}

// NewExecRptInfo creates a new instance of ExecRptInfo.
func NewExecRptInfo() *ExecRptInfo {
	return &ExecRptInfo{}
}

// String returns a string representation of the packet.
func (p *ExecRptInfo) String() string {
	return fmt.Sprintf("ExecRptInfo{PlatformId: %v, Pbu: %v, SetId: %v}", p.PlatformId, p.Pbu, p.SetId)
}

// Encode encodes the packet into a byte slice.
func (p *ExecRptInfo) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutBasicType(buf, p.PlatformId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "PlatformID", err)
	}
	if err := codec.PutFixedStringList[uint16](buf, p.Pbu, 8); err != nil {
		return err
	}
	if err := codec.PutBasicTypeList[uint16](buf, p.SetId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SetID", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ExecRptInfo) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.PlatformId = val
	}
	if val, err := codec.GetFixedStringList[uint16](buf, 8); err != nil {
		return err
	} else {
		p.Pbu = val
	}
	if val, err := codec.GetBasicTypeList[uint16, uint32](buf); err != nil {
		return err
	} else {
		p.SetId = val
	}
	return nil
}
