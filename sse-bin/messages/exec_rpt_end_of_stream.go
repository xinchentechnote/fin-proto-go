// Code generated by fin-protoc. DO NOT EDIT.
package sse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// ExecRptEndOfStream represents the packet structure.
type ExecRptEndOfStream struct {
	Pbu            string `json:"Pbu"`
	SetId          uint32 `json:"SetID"`
	EndReportIndex uint64 `json:"EndReportIndex"`
}

// NewExecRptEndOfStream creates a new instance of ExecRptEndOfStream.
func NewExecRptEndOfStream() *ExecRptEndOfStream {
	return &ExecRptEndOfStream{}
}

// String returns a string representation of the packet.
func (p *ExecRptEndOfStream) String() string {
	return fmt.Sprintf("ExecRptEndOfStream{Pbu: %v, SetId: %v, EndReportIndex: %v}", p.Pbu, p.SetId, p.EndReportIndex)
}

// Encode encodes the packet into a byte slice.
func (p *ExecRptEndOfStream) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.Pbu, 8); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.SetId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SetID", err)
	}
	if err := codec.PutBasicType(buf, p.EndReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "EndReportIndex", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ExecRptEndOfStream) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.Pbu = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.SetId = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.EndReportIndex = val
	}
	return nil
}
