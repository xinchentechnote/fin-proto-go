// Code generated by fin-protoc. DO NOT EDIT.
package sse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// SubExecRptSync represents the packet structure.
type SubExecRptSync struct {
	Pbu              string `json:"Pbu"`
	SetId            uint32 `json:"SetID"`
	BeginReportIndex uint64 `json:"BeginReportIndex"`
}

// NewSubExecRptSync creates a new instance of SubExecRptSync.
func NewSubExecRptSync() *SubExecRptSync {
	return &SubExecRptSync{}
}

// String returns a string representation of the packet.
func (p *SubExecRptSync) String() string {
	return fmt.Sprintf("SubExecRptSync{Pbu: %v, SetId: %v, BeginReportIndex: %v}", p.Pbu, p.SetId, p.BeginReportIndex)
}

// Encode encodes the packet into a byte slice.
func (p *SubExecRptSync) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.Pbu, 8); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.SetId); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "SetID", err)
	}
	if err := codec.PutBasicType(buf, p.BeginReportIndex); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "BeginReportIndex", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *SubExecRptSync) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.Pbu = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.SetId = val
	}
	if val, err := codec.GetBasicType[uint64](buf); err != nil {
		return err
	} else {
		p.BeginReportIndex = val
	}
	return nil
}

// ExecRptSync represents the packet structure.
type ExecRptSync struct {
	SubExecRptSync []*SubExecRptSync `json:"SubExecRptSync"`
}

// NewExecRptSync creates a new instance of ExecRptSync.
func NewExecRptSync() *ExecRptSync {
	return &ExecRptSync{}
}

// String returns a string representation of the packet.
func (p *ExecRptSync) String() string {
	return fmt.Sprintf("ExecRptSync{SubExecRptSync: %v}", p.SubExecRptSync)
}

// Encode encodes the packet into a byte slice.
func (p *ExecRptSync) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutObjectList[uint16](buf, p.SubExecRptSync); err != nil {
		return err
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *ExecRptSync) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetObjectList[uint16](buf, func() *SubExecRptSync { return &SubExecRptSync{} }); err != nil {
		return err
	} else {
		p.SubExecRptSync = val
	}
	return nil
}
