// Code generated by fin-protoc. DO NOT EDIT.
package sse_bin

import (
	"bytes"
	"fmt"

	"github.com/xinchentechnote/fin-proto-go/internal/codec"
)

// Logon represents the packet structure.
type Logon struct {
	SenderCompId string `json:"SenderCompID"`
	TargetCompId string `json:"TargetCompID"`
	HeartBtInt   uint16 `json:"HeartBtInt"`
	PrtclVersion string `json:"PrtclVersion"`
	TradeDate    uint32 `json:"TradeDate"`
	Qsize        uint32 `json:"QSize"`
}

// NewLogon creates a new instance of Logon.
func NewLogon() *Logon {
	return &Logon{}
}

// String returns a string representation of the packet.
func (p *Logon) String() string {
	return fmt.Sprintf("Logon{SenderCompId: %v, TargetCompId: %v, HeartBtInt: %v, PrtclVersion: %v, TradeDate: %v, Qsize: %v}", p.SenderCompId, p.TargetCompId, p.HeartBtInt, p.PrtclVersion, p.TradeDate, p.Qsize)
}

// Encode encodes the packet into a byte slice.
func (p *Logon) Encode(buf *bytes.Buffer) error {
	// Implement encoding logic here.
	if err := codec.PutFixedString(buf, p.SenderCompId, 32); err != nil {
		return err
	}
	if err := codec.PutFixedString(buf, p.TargetCompId, 32); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.HeartBtInt); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "HeartBtInt", err)
	}
	if err := codec.PutFixedString(buf, p.PrtclVersion, 8); err != nil {
		return err
	}
	if err := codec.PutBasicType(buf, p.TradeDate); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "TradeDate", err)
	}
	if err := codec.PutBasicType(buf, p.Qsize); err != nil {
		return fmt.Errorf("failed to encode %s: %w", "QSize", err)
	}
	return nil
}

// Decode decodes the packet from a byte slice.
func (p *Logon) Decode(buf *bytes.Buffer) error {
	if val, err := codec.GetFixedString(buf, 32); err != nil {
		return err
	} else {
		p.SenderCompId = val
	}
	if val, err := codec.GetFixedString(buf, 32); err != nil {
		return err
	} else {
		p.TargetCompId = val
	}
	if val, err := codec.GetBasicType[uint16](buf); err != nil {
		return err
	} else {
		p.HeartBtInt = val
	}
	if val, err := codec.GetFixedString(buf, 8); err != nil {
		return err
	} else {
		p.PrtclVersion = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.TradeDate = val
	}
	if val, err := codec.GetBasicType[uint32](buf); err != nil {
		return err
	} else {
		p.Qsize = val
	}
	return nil
}
